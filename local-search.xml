<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Intern study summary - Jun 28 Wed</title>
    <link href="/2023/06/28/Intern-study-summary-Jun-28-Wed/"/>
    <url>/2023/06/28/Intern-study-summary-Jun-28-Wed/</url>
    
    <content type="html"><![CDATA[<h1 id="key-shortcut">Key shortcut</h1><p>My new key board arrived today. I used to use finger combination onthe track pad to switch between screens and scroll. Now, I have to usemouse and keyboard. Thus, I will also summarize some of key boardshortcut.</p><hr /><blockquote><p>Note: I am using MacOS</p></blockquote><p>Switch screen: <code>Control + Left/Right Arrow</code></p><p>Scroll horizontally: press <code>Shift</code> while scroll withmouse</p><p>Switch between tabs in chrome: <code>cmd + Shift + A</code></p><h1 id="multiple-__init__-in-one-class">Multiple <code>__init()__</code>in one class</h1><p>In Python, a class can only have one <code>__init__</code> method. Ifyou define more than one <code>__init__</code> method, the last one youdefine will overwrite the previous ones.</p><p>However, there are ways to handle different numbers of parameterswhile initializing an instance in Python. The most common way is to usedefault arguments, variable-length arguments or keyword arguments in the<code>__init__</code> method.</p><p>Here's an example of using default arguments:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, a=<span class="hljs-number">1</span>, b=<span class="hljs-number">2</span>, c=<span class="hljs-number">3</span></span>):<br>        self.a = a<br>        self.b = b<br>        self.c = c<br><br><span class="hljs-comment"># Create an instance with default parameters</span><br>obj1 = MyClass()<br><br><span class="hljs-comment"># Create an instance with a different set of parameters</span><br>obj2 = MyClass(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>)<br><br><span class="hljs-comment"># Create an instance with a different set of parameters, in non-sequential order</span><br>obj3 = MyClass(b=<span class="hljs-number">7</span>, c=<span class="hljs-number">8</span>, a=<span class="hljs-number">9</span>)<br></code></pre></td></tr></table></figure><p>Another way is using variable-length arguments (<code>*args</code>)or keyword arguments (<code>**kwargs</code>):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        <span class="hljs-comment"># args is a tuple of positional arguments</span><br>        <span class="hljs-comment"># kwargs is a dictionary of keyword arguments</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(args):<br>            self.a = args[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(args) &gt; <span class="hljs-number">1</span>:<br>            self.b = args[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(args) &gt; <span class="hljs-number">2</span>:<br>            self.c = args[<span class="hljs-number">2</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;d&#x27;</span> <span class="hljs-keyword">in</span> kwargs:<br>            self.d = kwargs[<span class="hljs-string">&#x27;d&#x27;</span>]<br><br><span class="hljs-comment"># Using different numbers of positional arguments</span><br>obj1 = MyClass(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><br><span class="hljs-comment"># Using keyword arguments</span><br>obj2 = MyClass(d=<span class="hljs-number">4</span>)<br><br><span class="hljs-comment"># Using both positional and keyword arguments</span><br>obj3 = MyClass(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, d=<span class="hljs-number">4</span>)<br><br></code></pre></td></tr></table></figure><p>Remember that using <code>*args</code> and <code>**kwargs</code> canmake your code less clear, because it's not immediately obvious whichparameters the class expects. If you know which parameters your classshould accept, it's often clearer to use default arguments.</p><h1 id="operation-with-yaml-file">Operation with YAML file</h1><p>You may find my introduction to YAML format in my blog: <ahref="https://slray.com/2023/06/23/Intern-study-summary-Jun-15-Thu/#yaml">Internstudy summary Jun 15 Thu</a>.</p><hr /><p>You can use the <code>yaml</code> library in Python to write adictionary to a YAML file. The <code>yaml</code> library is not includedin the standard Python library, so you'll need to install it first. Youcan do so with pip:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pyyaml<br></code></pre></td></tr></table></figure><p>Here is an example of how to write a dictionary to a YAML file:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> yaml<br><br><span class="hljs-comment"># your dictionary</span><br>data = &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>    <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">30</span>,<br>    <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;New York&quot;</span><br>&#125;<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.yaml&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    yaml.dump(data, file)<br></code></pre></td></tr></table></figure><p>In this example, <code>yaml.dump()</code> is used to write the datato the file. The output file ('output.yaml') will look something likethis:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">age:</span> <span class="hljs-number">30</span><br><span class="hljs-attr">city:</span> <span class="hljs-string">New</span> <span class="hljs-string">York</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">John</span><br></code></pre></td></tr></table></figure><p>Note: YAML is a human-readable data-serialization language. It iscommonly used for configuration files and in applications where data isbeing stored or transmitted.</p><h1 id="list-comprehension">List Comprehension</h1><p>I had list comprehension questions while I was having an interviewfor a intern position at a quant company. In fact, I did a terrible jobon that. Here I will provide two examples for rewrite a for loop in listcomprehension form.</p><h2 id="example-1">Example 1:</h2><p>Rewrite:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> pair <span class="hljs-keyword">in</span> top_continuous_pairs:<br>    symbol = &#123;<span class="hljs-string">&quot;exchange&quot;</span>: self.exchange, <span class="hljs-string">&quot;pairDb&quot;</span>: pair&#125;<br>    symbols.append(symbol)<br><br></code></pre></td></tr></table></figure><p>Answer:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">symbols = [&#123;<span class="hljs-string">&quot;exchange&quot;</span>: self.exchange, <span class="hljs-string">&quot;pairDb&quot;</span>: pair&#125; <span class="hljs-keyword">for</span> pair <span class="hljs-keyword">in</span> top_continuous_pairs]<br></code></pre></td></tr></table></figure><p>In this single line of code, a new dictionary is created for eachitem in <code>top_continuous_pairs</code>, with "exchange" set to thevalue of <code>self.exchange</code> and "pairDb" set to the currentitem. The result is a list of these dictionaries, which is assigned to<code>symbols</code>.</p><p>This is equivalent to the original for-loop, but more concise. Notethat list comprehensions can be harder to read than regular for-loopswhen they start getting complex, so use them wisely.</p><h2 id="example-2">Example 2:</h2><p>Rewrite:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">backtest_pairs = []<br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> symbols:<br>        backtest_pair = s.copy()<br>        backtest_pair[<span class="hljs-string">&quot;channel&quot;</span>] = self.channel<br>        backtest_pairs.append(backtest_pair)<br></code></pre></td></tr></table></figure><p>The code above creates a deep copy of each dictionary in<code>symbols</code> and then adds a new key-value pair, where "channel"is the key and <code>self.channel</code> is the value. After modifyingthe dictionary, it is then appended to the <code>backtest_pairs</code>list.</p><p>This for-loop can be rewritten as a list comprehension like so:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">backtest_pairs = [&#123;**s, <span class="hljs-string">&quot;channel&quot;</span>: self.channel&#125; <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> symbols]<br></code></pre></td></tr></table></figure><p>In this list comprehension,<code>&#123;**s, "channel": self.channel&#125;</code> creates a new dictionarywhich is a copy of <code>s</code> with an additional key-value pairwhere "channel" is the key and <code>self.channel</code> is the value.The <code>&#123;**s&#125;</code> syntax is using dictionary unpacking to create acopy of the dictionary <code>s</code>.</p><p>Remember that list comprehensions are great for writing more concisecode, but they can also be more difficult to read if they get toocomplex. Always strive for the right balance between conciseness andreadability in your code.</p><h3 id="about-the-s">About the <code>**s</code></h3><p>Does the <code>*s</code> have any relationship with pointer in C?</p><p>No, the <code>**s</code> in Python does not have any relationshipwith pointers in C.</p><p>In Python, the <code>**</code> operator is used for differentpurposes:</p><ol type="1"><li><p>When used in a function call, it's used for unpacking dictionarykey-value pairs as keyword arguments in a function. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a=<span class="hljs-number">1</span>, b=<span class="hljs-number">2</span></span>):<br>    <span class="hljs-built_in">print</span>(a, b)<br><br>args = &#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">4</span>&#125;<br>func(**args)  <span class="hljs-comment"># This will output: 3 4</span><br></code></pre></td></tr></table></figure><p>In this case, <code>**args</code> is unpacking the dictionary andpassing the values to the function as keyword arguments.</p></li><li><p>When used in a function definition, it's used for accepting anarbitrary number of keyword arguments. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">**kwargs</span>):<br>    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> kwargs.items():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;key&#125;</span> = <span class="hljs-subst">&#123;value&#125;</span>&quot;</span>)<br><br>func(a=<span class="hljs-number">3</span>, b=<span class="hljs-number">4</span>, c=<span class="hljs-number">5</span>)  <span class="hljs-comment"># This will output: a = 3, b = 4, c = 5</span><br></code></pre></td></tr></table></figure><p>Here, <code>**kwargs</code> is capturing all keyword arguments passedto the function into a dictionary.</p></li><li><p>When used with a numeric type, <code>*</code> is theexponentiation operator. For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span> ** <span class="hljs-number">3</span>)  <span class="hljs-comment"># This will output: 8</span><br></code></pre></td></tr></table></figure><p>Here, <code>**</code> is used for raising 2 to the power of3.</p></li></ol><p>In C, the <code>*</code> operator is used for a completely differentpurpose: it's used for creating and dereferencing pointers. Python doesnot have pointers like C, and the <code>**</code> operator in Pythondoes not have any relationship with the pointer concept in C.</p>]]></content>
    
    
    <categories>
      
      <category>Daily Logs</category>
      
      <category>Intern Log</category>
      
      <category>Tech Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intern</tag>
      
      <tag>Intern Log</tag>
      
      <tag>Python</tag>
      
      <tag>Python Grammar</tag>
      
      <tag>Intern At 300K</tag>
      
      <tag>Learning Log</tag>
      
      <tag>Tech</tag>
      
      <tag>List Comprehension</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intern study summary - Jun 27 Tue</title>
    <link href="/2023/06/28/Intern-study-summary-Jun-27-Tue/"/>
    <url>/2023/06/28/Intern-study-summary-Jun-27-Tue/</url>
    
    <content type="html"><![CDATA[<h1 id="vim">Vim</h1><p>When I was using git to merge, there was part of the command linepopped up asking me to add some commit message. What is that? How can Iquit it?</p><p>You're very likely to be in Vim, the default editor for many systems,which Git often uses for writing commit messages.</p><p>If you want to exit without saving the message, you can follow thesesteps:</p><ol type="1"><li>Press the <code>ESC</code> key (if you are in insert or appendmode)</li><li>Then type <code>:q!</code> and press <code>Enter</code>. The<code>:q!</code> command tells Vim to quit without saving changes.</li></ol><p>If you want to save your message and then exit, you can follow thesesteps:</p><ol type="1"><li>Press <code>ESC</code> key (if you are in insert or appendmode)</li><li>Then type <code>:wq</code> and press <code>Enter</code>. The<code>:wq</code> command tells Vim to write (save) the changes and thenquit.</li></ol><h2 id="how-to-change-the-default-editor-for-git">How to change thedefault editor for git?</h2><p>You can switch to a different text editor. For example, if you preferto use visual studio code (vsc), you can switch the default editor forgit with the following command:</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">git config --<span class="hljs-keyword">global</span> core.<span class="hljs-keyword">editor</span> <span class="hljs-string">&quot;code&quot;</span><br></code></pre></td></tr></table></figure><h1 id="python-add-argument">Python add argument</h1><p>When using Git, you should often use the commend<code>git commit -m "xxxx"</code>. Here the <code>git</code> is justlike running <code>python xxx.py</code> or <code>make</code>, and thething following it is called an argument. Here the argument is<code>commit -m "xxx"</code>.</p><p>You can also do that in python, which means you could do things like<code>python test.py -times 100</code>. And, you can make your ownargument.</p><p>Here is an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@click.command()</span><br><span class="hljs-meta">@click.argument(<span class="hljs-params"><span class="hljs-string">&quot;config&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span></span>)</span><br><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;-f&quot;</span>, <span class="hljs-string">&quot;--config-file&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-literal">None</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">config, config_file</span>):<br>    <span class="hljs-comment"># Your code here</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>Explanation:</p><p>These lines of code belong to a Python program using the<code>click</code> library. <code>click</code> is a package for creatingbeautiful command line interfaces in a composable way. It's highlyconfigurable but comes with sensible defaults out of the box.</p><p>Here's the breakdown:</p><ol type="1"><li><strong><code>@click.command()</code></strong>: This line is adecorator that tells Click this function will be a command-line command.This means when you run your script from the command-line, this functioncan be executed.</li><li><strong><code>@click.argument("config", type=str, required=False)</code></strong>:This decorator adds an argument to your command. Arguments arepositional parameters to your command. In this case, an argument named<code>config</code> is expected, which should be of <code>str</code>(string) type. The <code>required=False</code> parameter means thisargument is optional.</li><li><strong><code>@click.option("-f", "--config-file", type=str, default=None)</code></strong>:This decorator adds an option to your command. Options are extraparameters you can include when calling your command, and they aretypically used to modify the behavior of the command in some way.Options are denoted by either a single`<code>followed by a single character (like</code>f<code>) or by</code>-<code>followed by a word (like</code>-config-file<code>). Either</code>f<code>or</code>-config-file<code>can be used to specify this option in this case. This option takes a string (</code>type=str<code>) and defaults to</code>None<code>if it's not provided (</code>default=None`).</li></ol><p>In practical usage, these decorators would be applied to a functionthat forms the core of your command-line application.</p><p>In the code above, <code>main</code> is the function that getsexecuted when you run your command. The parameters <code>config</code>and <code>config_file</code> get their values from the command-linearguments and options respectively.</p><h2id="what-if-i-want-to-have-another-optional-argument-other-than-config-do-i-add-another-click.arguemnt">whatif I want to have another optional argument other than<code>config</code>? Do I add another <code>@click.arguemnt</code>?</h2><p>Yes, you can add additional arguments by using the<code>@click.argument()</code> decorator again. The key point toremember is that arguments are positional. This means the order in whichthey are defined in your function will be the order in which they shouldbe provided when you run your command.</p><p>Here's an example of adding an additional argument named<code>option</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@click.command()</span><br><span class="hljs-meta">@click.argument(<span class="hljs-params"><span class="hljs-string">&quot;config&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span></span>)</span><br><span class="hljs-meta">@click.argument(<span class="hljs-params"><span class="hljs-string">&quot;option&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, required=<span class="hljs-literal">False</span></span>)</span><br><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;-f&quot;</span>, <span class="hljs-string">&quot;--config-file&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-literal">None</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">config, option, config_file</span>):<br>    <span class="hljs-comment"># Your code here</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>In this example, <code>option</code> is another optional argument.When running this command, <code>config</code> would need to be providedbefore <code>option</code>. For instance:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python your_script.py my_config my_option -f my_config_file<br></code></pre></td></tr></table></figure><p>In this command, <code>my_config</code> would be passed to the<code>config</code> argument, <code>my_option</code> would be passed tothe <code>option</code> argument, and <code>my_config_file</code> wouldbe passed to the <code>config_file</code> option.</p><p>If you find the positional nature of arguments to be limiting orconfusing, consider using more options (with<code>@click.option()</code>) instead, as options can be provided in anyorder.</p><h2id="does-the-click.option-has-a-relationship-with-the-upper-one.-for-example-the--f-is-belong-to-option-i-cannot-add--f-after-config">Doesthe <code>@click.option</code> has a relationship with the upper one.For example, the '-f' is belong to option, I cannot add '-f' after'config'?</h2><p>The <code>-f</code> or <code>--config-file</code> option, asspecified in the <code>@click.option</code> decorator, can be placedanywhere on the command line when invoking the command, regardless ofthe order of other arguments or options.</p><p>Here are valid ways of calling the command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python your_script.py my_config -f my_config_file<br>python your_script.py -f my_config_file my_config<br><br></code></pre></td></tr></table></figure><p>In both of these examples, <code>my_config</code> would be passed tothe <code>config</code> argument and <code>my_config_file</code> wouldbe passed to the <code>config_file</code> option.</p><p>The decorators <code>@click.argument</code> and<code>@click.option</code> only dictate the structure and syntax ofcommand-line inputs for your Python script, they don't rigidly fix thesequence in which these arguments and options should be passed on thecommand line. However, do note that the sequence of positional arguments(<code>@click.argument</code>) is important while the sequence ofoptions (<code>@click.option</code>) is not.</p><h2 id="here-is-a-more-detailed-example">Here is a more detailedexample</h2><p>Requirement: I want to add an optional argument after<code>python xx.py</code> that specify the start, end, and preddate.</p><p>For optional parameters like start date, end date, and predictiondate, it's usually best to use options (<code>@click.option</code>)instead of arguments (<code>@click.argument</code>). Options providemore flexibility as they can be specified in any order and they areeasier for users to understand because they are more explicit.</p><p>Here's how you might add these to your command:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@click.command()</span><br><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;--start-date&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;The start date&quot;</span>, default=<span class="hljs-literal">None</span></span>)</span><br><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;--end-date&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;The end date&quot;</span>, default=<span class="hljs-literal">None</span></span>)</span><br><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;--pred-date&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;The prediction date&quot;</span>, default=<span class="hljs-literal">None</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">start_date, end_date, pred_date</span>):<br>    <span class="hljs-comment"># Your code here</span><br>    <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure><p>In this example, each option can be used like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python xx.py --start-date 2023-01-01 --end-date 2023-12-31 --pred-date 2024-01-01<br><br></code></pre></td></tr></table></figure><p>If a user does not provide an option, its default value will be<code>None</code>. If you want a different default value, you can changethe <code>default</code> parameter in the <code>@click.option()</code>call.</p><p>As for conventions, it's typical to use hyphens (<code>-</code>) toseparate words in option and command names, rather than underscores(<code>_</code>). This is more consistent with the way othercommand-line tools work. It's also common to provide a short, one-lettername for each option if it's an option that will be used frequently.This can be done by providing additional names when calling<code>@click.option()</code>, like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;-s&quot;</span>, <span class="hljs-string">&quot;--start-date&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;The start date&quot;</span>, default=<span class="hljs-literal">None</span></span>)</span><br><br></code></pre></td></tr></table></figure><p>In this example, the <code>start-date</code> option can be specifiedwith either <code>-s</code> or <code>--start-date</code>. This makes itquicker to type for users who use it frequently, while still keeping iteasy to understand for new users.</p><h2 id="explain-the-example">Explain the example</h2><p>why I am using <code>-</code> in the decorator but <code>_</code> inthe main function? Is it just following the order, which means the topargument is the first in the function, or it is corresponding thatchange '-' to '_'?</p><p>In the Click library, when you define options, they can have a dashin their name (<code>-</code>). This is a common practice in commandline tools. However, in Python, variable names cannot contain a dashbecause the dash is interpreted as the subtraction operator. So, in thecontext of the function definition, you have to use underscores insteadof dashes.</p><p>Click automatically converts dashes to underscores when passing thevalues to your function. This allows you to follow command-lineconventions when defining your arguments and options, while still havingvalid Python variable names inside your function.</p><p>For example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;--start-date&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;The start date&quot;</span>, default=<span class="hljs-literal">None</span></span>)</span><br></code></pre></td></tr></table></figure><p>Here, the <code>start-date</code> will be accessed as<code>start_date</code> in your function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">start_date</span>):<br>    <span class="hljs-comment"># start_date here is equivalent to --start-date in the option</span><br></code></pre></td></tr></table></figure><p>The argument order in the function definition does need to match theorder in which you've decorated the function with<code>@click.argument</code> and <code>@click.option</code> decorators.However, it doesn't matter whether an argument or option has dashes orunderscores in its name; Click handles that conversion for you.</p><hr /><p>So if I change</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@click.command()</span><br><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;--start-date&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;The start date&quot;</span>, default=<span class="hljs-literal">None</span></span>)</span><br><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;--end-date&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;The end date&quot;</span>, default=<span class="hljs-literal">None</span></span>)</span><br><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;--pred-date&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;The prediction date&quot;</span>, default=<span class="hljs-literal">None</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">start_date, end_date, pred_date</span>):<br>    <span class="hljs-comment"># Your code here</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>to</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@click.command()</span><br><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;--start-date&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;The start date&quot;</span>, default=<span class="hljs-literal">None</span></span>)</span><br><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;--end-date&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;The end date&quot;</span>, default=<span class="hljs-literal">None</span></span>)</span><br><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;--pred-date&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;The prediction date&quot;</span>, default=<span class="hljs-literal">None</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">start_date, pred_date, end_date</span>):<br><span class="hljs-comment"># Your code here</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>it won't change the functionality of the program?</p><p>For options in Click, the order of parameters in your functiondefinition does not have to match the order of the<code>@click.option()</code> decorators. This is because options are notpositional; they are identified by their names.</p><p>So yes, swapping <code>pred_date</code> and <code>end_date</code> inthe function definition won't change the functionality of yourprogram:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@click.command()</span><br><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;--start-date&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;The start date&quot;</span>, default=<span class="hljs-literal">None</span></span>)</span><br><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;--end-date&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;The end date&quot;</span>, default=<span class="hljs-literal">None</span></span>)</span><br><span class="hljs-meta">@click.option(<span class="hljs-params"><span class="hljs-string">&quot;--pred-date&quot;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;The prediction date&quot;</span>, default=<span class="hljs-literal">None</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">start_date, pred_date, end_date</span>):<br>    <span class="hljs-comment"># Your code here</span><br>    <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure><p>You can still call the command with options in any order:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python xx.py --start-date 2023-01-01 --end-date 2023-12-31 --pred-date 2024-01-01<br><br></code></pre></td></tr></table></figure><p>or</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python xx.py --pred-date 2024-01-01 --start-date 2023-01-01 --end-date 2023-12-31<br></code></pre></td></tr></table></figure><p>Both will work fine.</p><h1 id="shell-script-grammar">Shell script grammar</h1><p>I am using the shell script grammar under Jenkins, the uppercasedstring inside of <code>$&#123;&#125;</code> is a placeholder (a variable that hasvalues, and the string inside <code>$&#123;&#125;</code> is its name).</p><h2id="if-else-statement-in-shell-script-grammar-example"><code>if-else</code>statement in shell script grammar example</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> <span class="hljs-variable">$&#123;PIP_INSTALL&#125;</span><br><span class="hljs-keyword">then</span><br>   make install<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>In the code above, <code>$&#123;PIP_INSTALL&#125;</code> is a boolean typedvalue. <code>fi</code> is an abbreviation for “finish”, meaning the endof the code block. Similar to the <code>&#125;</code> in java’s if elsestatement.</p><p>Rewrite the code in Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (PIP_INSTALL) &#123;<br><span class="hljs-comment">// make install execution</span><br>&#125;<br></code></pre></td></tr></table></figure><h2id="check-if-a-variable-is-empty-similar-to-null-in-java-and-none-in-python">Checkif a variable is empty (similar to <code>null</code> in Java and<code>None</code> in Python)</h2><p>If you want to check if a variable in a bash shell script (like theone you posted) is empty, you can use <code>-z</code> operator, whichreturns true if the length of the string is zero.</p><p>Here is an example of your script checking if the<code>$&#123;PIP_INSTALL&#125;</code> variable is empty or not:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PIP_INSTALL&#125;</span>&quot;</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;PIP_INSTALL is empty&quot;</span><br><span class="hljs-keyword">else</span><br>   make install<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>In this script, <code>-z "$&#123;PIP_INSTALL&#125;"</code> checks if<code>$&#123;PIP_INSTALL&#125;</code> is empty. If <code>$&#123;PIP_INSTALL&#125;</code> isempty, it prints "PIP_INSTALL is empty", otherwise it runs<code>make install</code>.</p><p>The brackets <code>[</code> and <code>]</code> are required for thetest command (<code>[ -z "$&#123;PIP_INSTALL&#125;" ]</code> is equivalent to<code>test -z "$&#123;PIP_INSTALL&#125;"</code>). And also note that there shouldbe a space between <code>[</code> and <code>-z</code> and between<code>$&#123;PIP_INSTALL&#125;</code> and <code>]</code>.</p><p>The <code>$&#123;PIP_INSTALL&#125;</code> variable is enclosed in quotes. Thisis a good practice because it prevents word splitting and pathnameexpansion. If <code>$&#123;PIP_INSTALL&#125;</code> is not set or if it is set toa value that contains spaces, without the quotes, the script may notbehave as expected.</p><h2 id="and-operation"><code>AND</code> operation</h2><p>If you want to perform an AND operation in a Bash shell script, youcan use <code>-a</code> operator, or <code>&amp;&amp;</code> operatorinside your <code>if</code> condition.</p><p>Let's say you want to check if <code>$&#123;PIP_INSTALL&#125;</code> is notempty, and some other variable <code>$&#123;SOME_VAR&#125;</code> equals "yes",you could do something like:</p><p>Option 1: Using <code>-a</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PIP_INSTALL&#125;</span>&quot;</span> -a <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SOME_VAR&#125;</span>&quot;</span> = <span class="hljs-string">&quot;yes&quot;</span> ]<br><span class="hljs-keyword">then</span><br>   make install<br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Either PIP_INSTALL is empty or SOME_VAR is not yes&quot;</span><br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><p>Option 2: Using <code>&amp;&amp;</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;PIP_INSTALL&#125;</span>&quot;</span> ] &amp;&amp; [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;SOME_VAR&#125;</span>&quot;</span> = <span class="hljs-string">&quot;yes&quot;</span> ]<br><span class="hljs-keyword">then</span><br>   make install<br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Either PIP_INSTALL is empty or SOME_VAR is not yes&quot;</span><br><span class="hljs-keyword">fi</span><br><br></code></pre></td></tr></table></figure><p>In both scripts:</p><ul><li><code>n "$&#123;PIP_INSTALL&#125;"</code> checks if<code>$&#123;PIP_INSTALL&#125;</code> is not empty.</li><li><code>"$&#123;SOME_VAR&#125;" = "yes"</code> checks if<code>$&#123;SOME_VAR&#125;</code> is equal to "yes".</li><li>The <code>if</code> statement is true (and <code>make install</code>is executed) if and only if both conditions are true. Otherwise, "EitherPIP_INSTALL is empty or SOME_VAR is not yes" is printed.</li></ul><p>Again, note the spaces surrounding the brackets and operators. Theyare required for the script to work correctly.</p><h2 id="equal-in-if-comparing-to-other-languages">equal in if comparingto other languages</h2><p>If I want to see if something equals to another, unlike otherprogramming languages that I have to write "==", I can use only one"=”.</p><p>Yes, that's correct. In Bash shell scripts, you use a single equalssign (<code>=</code>) for string comparison in an <code>if</code>statement, rather than the double equals sign (<code>==</code>) that'stypically used in many programming languages.</p><p>For example, if you wanted to check if the string variable<code>$&#123;MY_VAR&#125;</code> equals the string "Hello", you could write:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;MY_VAR&#125;</span>&quot;</span> = <span class="hljs-string">&quot;Hello&quot;</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;MY_VAR is Hello&quot;</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;MY_VAR is not Hello&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>This would print "MY_VAR is Hello" if <code>$&#123;MY_VAR&#125;</code> equals"Hello", and "MY_VAR is not Hello" otherwise.</p><p>However, it is also worth noting that using <code>==</code> forcomparison also works in bash and it is common to see it in many scriptsfor the sake of clarity and consistency with other programminglanguages, although <code>=</code> is more traditional:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;MY_VAR&#125;</span>&quot;</span> == <span class="hljs-string">&quot;Hello&quot;</span> ]<br><span class="hljs-keyword">then</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;MY_VAR is Hello&quot;</span><br><span class="hljs-keyword">else</span><br>   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;MY_VAR is not Hello&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>In both cases, be sure to leave spaces around the <code>=</code> or<code>==</code>. Bash treats them as special characters and requiresspaces around them to correctly interpret your command.</p><h2 id="print-in-shell">“<code>print</code>” in shell</h2><p>The <code>echo</code> in the code above, then, is like the printstatement in other language?</p><p>Yes, that's correct. The <code>echo</code> command in Bash is similarto the <code>print</code> statement in many other programminglanguages.</p><p><code>echo</code> is used in shell scripts and command lineinterfaces to output the strings it is being passed as arguments to thestandard output, which is typically the terminal. This can be text orthe value of a variable.</p><p>For example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello, World!&quot;</span><br></code></pre></td></tr></table></figure><p>This command will print "Hello, World!" to the terminal.</p><p>And you can use it with variables like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">MY_VAR=<span class="hljs-string">&quot;Hello, World!&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;MY_VAR&#125;</span><br></code></pre></td></tr></table></figure><p>This will also print "Hello, World!" to the terminal.</p>]]></content>
    
    
    <categories>
      
      <category>Daily Logs</category>
      
      <category>Intern Log</category>
      
      <category>Tech Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intern</tag>
      
      <tag>Intern Log</tag>
      
      <tag>Python</tag>
      
      <tag>Python Grammar</tag>
      
      <tag>Terminal</tag>
      
      <tag>Terminal Command</tag>
      
      <tag>Intern At 300K</tag>
      
      <tag>Learning Log</tag>
      
      <tag>Tech</tag>
      
      <tag>Shell Script Grammar</tag>
      
      <tag>Vim</tag>
      
      <tag>Git</tag>
      
      <tag>Git command</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intern study summary - Jun 25 Sun</title>
    <link href="/2023/06/25/Intern-study-summary-Jun-25-Sun/"/>
    <url>/2023/06/25/Intern-study-summary-Jun-25-Sun/</url>
    
    <content type="html"><![CDATA[<p>This blog is create on the day of 2023-06-28 21:37:02. Yet, tomaintain the order, I changed the creating date.</p><h1 id="python">Python</h1><h2 id="package-directory-folder">Package &amp; Directory (folder)</h2><p>In Python, a directory becomes a package when it contains a specialfile named <code>__init__.py</code>. This file can be empty, and itindicates that the directory should be treated as a Python package. APython package is simply a way of organizing related modules(<code>.py</code> files) into a directory hierarchy.</p><p>Essentially, a package in Python is also a directory, but not alldirectories are packages. If you have a directory with Python files butno <code>__init__.py</code>, Python will treat it as a directory ofscripts, not as a package.</p><p>Let's say you have a directory called <code>utils</code> and insideit, you have some Python scripts like <code>script1.py</code>,<code>script2.py</code>, etc. If you want to import functions from thesescripts in other parts of your code like so:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> utils.script1 <span class="hljs-keyword">import</span> my_function<br></code></pre></td></tr></table></figure><p>You would need to make <code>utils</code> a package by adding an<code>__init__.py</code> file inside it. If you don't add an<code>__init__.py</code> file, Python won't recognize <code>utils</code>as a package and you won't be able to import from it in this manner.</p><p>To summarize, if you just want a bunch of Python scripts in a folderand you're not concerned about importing from them, you can just use aregular directory. But if you want to be able to importfunctions/classes from these scripts as part of a package, you shouldadd an <code>__init__.py</code> file to the directory, turning it into apackage.</p><h2 id="io-in-python"><code>I/O</code> in python</h2><h3 id="create-folders-by-python">Create folders by python</h3><p>You can create folders (directories) in Python using the<code>os</code> module's <code>mkdir</code> or <code>makedirs</code>function.</p><p>Here's how to create a single folder:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>os.mkdir(<span class="hljs-string">&quot;my_folder&quot;</span>)<br></code></pre></td></tr></table></figure><p>This will create a folder named "my_folder" in the currentdirectory.</p><p>If you want to create a nested directory structure, you can use<code>os.makedirs</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>os.makedirs(<span class="hljs-string">&quot;my_folder/sub_folder/sub_sub_folder&quot;</span>)<br></code></pre></td></tr></table></figure><p>This will create the entire path, even if the intermediate folders("my_folder" and "my_folder/sub_folder") do not exist.</p><p>Note that these functions will raise a <code>FileExistsError</code>if the folder you're trying to create already exists. If you want toavoid this, you can check if the directory exists before creatingit:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&quot;my_folder&quot;</span>):<br>    os.mkdir(<span class="hljs-string">&quot;my_folder&quot;</span>)<br></code></pre></td></tr></table></figure><p>Or, if you're using Python 3.7 or later, you can use the<code>exist_ok</code> parameter with <code>os.makedirs</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>os.makedirs(<span class="hljs-string">&quot;my_folder/sub_folder/sub_sub_folder&quot;</span>, exist_ok=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>This will not raise an error if the folder already exists.</p><h3 id="get-a-list-of-folders-name">Get a list of folder's name</h3><p>You can get a list of folder names in a directory using the<code>os</code> module's <code>listdir</code> or <code>os.scandir</code>functions.</p><p>Here's a simple example using <code>os.listdir</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>folder_path = <span class="hljs-string">&quot;/path/to/your/folder&quot;</span><br>folders = [name <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> os.listdir(folder_path) <span class="hljs-keyword">if</span> os.path.isdir(os.path.join(folder_path, name))]<br><br><span class="hljs-built_in">print</span>(folders)<br></code></pre></td></tr></table></figure><p>This script will give you a list of all the directories (not files)in the specified folder. The <code>os.path.isdir</code> function checksif the path is a directory.</p><p>Here's an example using <code>os.scandir</code>, which is a bit moreefficient if you're doing additional operations like checking if thepaths are directories:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>folder_path = <span class="hljs-string">&quot;/path/to/your/folder&quot;</span><br>folders = [entry.name <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> os.scandir(folder_path) <span class="hljs-keyword">if</span> entry.is_dir()]<br><br><span class="hljs-built_in">print</span>(folders)<br></code></pre></td></tr></table></figure><p>Both these scripts will print the names of the folders in thespecified directory. Note that these are just the folder names, nottheir full paths. If you want the full paths, replace<code>entry.name</code> with <code>entry.path</code> in the secondexample, or <code>name</code> with<code>os.path.join(folder_path, name)</code> in the first.</p><h3 id="create-a-file">Create a file</h3><p>You can create a file in Python using the built-in <code>open</code>function with the <code>w</code> (write) mode. Here's an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;myfile.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>This code will create a file named <code>myfile.txt</code> in thecurrent directory. If the file already exists, this will overwriteit.</p><p>The <code>with</code> statement is used for context management, itensures that the file is properly closed after it is no longerneeded.</p><p>If you want to write some data to the file when you create it, youcan do that like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;myfile.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br></code></pre></td></tr></table></figure><p>This code will create <code>myfile.txt</code> and write the string<code>Hello, World!</code> to it.</p><p>If you want to create the file without overwriting it if it alreadyexists, you can use the <code>x</code> (exclusive creation) mode:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;myfile.txt&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">except</span> FileExistsError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The file already exists.&quot;</span>)<br></code></pre></td></tr></table></figure><p>This code will only create the file if it doesn't already exist. Ifthe file does exist, a <code>FileExistsError</code> is raised, and thecode in the <code>except</code> block is executed.</p><h3 id="how-to-delete-a-file">how to delete a file</h3><p>You can delete a file in Python using the <code>os</code> module's<code>remove</code> function. Here's a simple example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>file_path = <span class="hljs-string">&quot;/path/to/your/file.txt&quot;</span><br>os.remove(file_path)<br></code></pre></td></tr></table></figure><p>This code will delete the file at the specified path.</p><p>Please be careful, because this operation cannot be undone. Once afile is deleted in this way, it cannot be recovered.</p><p>If you want to make sure that a file exists before you try to deleteit, you can use <code>os.path.isfile</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>file_path = <span class="hljs-string">&quot;/path/to/your/file.txt&quot;</span><br><br><span class="hljs-keyword">if</span> os.path.isfile(file_path):<br>    os.remove(file_path)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Error: <span class="hljs-subst">&#123;file_path&#125;</span> not a valid filename&#x27;</span>)<br></code></pre></td></tr></table></figure><p>This code will only try to delete the file if it exists. If the filedoesn't exist, it will print an error message instead.</p><h2id="unexpected-eof-while-parsing"><strong><code>unexpected EOF while parsing</code></strong></h2><p>The error message <code>unexpected EOF while parsing</code> typicallymeans that the Python interpreter has reached the end of your file (EOFstands for End Of File) while it was expecting to find something else.This is typically due to unmatched or improperly used parentheses,brackets, or quotes.</p><p>For example, this error could happen if you have an openingparenthesis or bracket without a closing one:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Missing closing parenthesis</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, world!&quot;</span><br><br><span class="hljs-comment"># Missing closing bracket</span><br>my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>Or if you have opened a string with a quote but never closed it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Missing closing quote</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, world)</span><br></code></pre></td></tr></table></figure><p>Without the rest of your code, I can't tell you exactly what'scausing the problem. But you should go through your code and make surethat all parentheses, brackets, and quotes are properly matched andclosed. Using an IDE or a text editor with syntax highlighting can bevery helpful for this, as it will often visually indicate unmatchedparentheses or quotes.</p><h2id="parameter-filename-unfilled"><code>Parameter 'filename' unfilled</code></h2><p>When a Python function, method, or constructor (the<code>__init__</code> method in a class) requires arguments, you mustprovide those arguments whenever you call the function, method, orconstructor. If you don't, you will see an error message or a warningdepending on your development environment.</p><p>The message "Parameter 'filename' unfilled" is telling you that youare calling a function or method that requires a parameter named'filename', but you are not providing a value for that parameter.</p><p>For example, suppose you have the following function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_file_contents</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        <span class="hljs-built_in">print</span>(file.read())<br></code></pre></td></tr></table></figure><p>If you call <code>print_file_contents()</code> without providing anargument, like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">print_file_contents()<br></code></pre></td></tr></table></figure><p>Then you will see an error because you didn't fill in the 'filename'parameter. The correct way to call the function is to provide thefilename as an argument, like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">print_file_contents(<span class="hljs-string">&#x27;myfile.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>This error can also occur if you're using an Integrated DevelopmentEnvironment (IDE) or editor that provides code checking or lintingservices, and you've written a function call without filling in all therequired parameters. In this case, the IDE will flag the incompletefunction call as an error even before you run the code.</p><h2 id="key-check-in-python">Key check in Python</h2><p><code>has_key()</code> in python:</p><p>The <code>has_key()</code> method in Python dictionaries wasdeprecated and removed in Python 3. It was used to check if a given keyexists in a dictionary. Instead of using <code>has_key()</code>, you candirectly use the <code>in</code> operator to check for the presence of akey in a dictionary.</p><p>Here's an example of how you can check if a key exists in adictionary using the <code>in</code> operator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&#x27;key1&#x27;</span>: <span class="hljs-string">&#x27;value1&#x27;</span>, <span class="hljs-string">&#x27;key2&#x27;</span>: <span class="hljs-string">&#x27;value2&#x27;</span>, <span class="hljs-string">&#x27;key3&#x27;</span>: <span class="hljs-string">&#x27;value3&#x27;</span>&#125;<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;key2&#x27;</span> <span class="hljs-keyword">in</span> my_dict:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Key &#x27;key2&#x27; exists in the dictionary.&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Key &#x27;key2&#x27; does not exist in the dictionary.&quot;</span>)<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Key <span class="hljs-string">&#x27;key2&#x27;</span> exists <span class="hljs-keyword">in</span> the dictionary.<br></code></pre></td></tr></table></figure><p>Using the <code>in</code> operator is the recommended way to checkfor the presence of a key in a dictionary in Python.</p><h2 id="hex-in-python">Hex in python</h2><h3 id="example">Example:</h3><p>Convert str of hex to a hex in python, and add one</p><p>To convert a string representation of a hexadecimal number to aninteger, use the <code>int</code> function in Python with base 16. Thenyou can add one to this value as it is now an integer. Here's anexample:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">hex_str = <span class="hljs-string">&quot;0x1a&quot;</span><br>value = <span class="hljs-built_in">int</span>(hex_str, <span class="hljs-number">16</span>)<br>value += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure><p>This will output <code>27</code> (1a in hexadecimal is 26 indecimal).</p><p>If you want the result to remain in hexadecimal format, you can thenconvert it back to a hexadecimal string using the <code>hex</code>function:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">hex_str = <span class="hljs-string">&quot;0x1a&quot;</span><br>value = <span class="hljs-built_in">int</span>(hex_str, <span class="hljs-number">16</span>)<br>value += <span class="hljs-number">1</span><br>new_hex_str = <span class="hljs-built_in">hex</span>(value)<br><span class="hljs-built_in">print</span>(new_hex_str)<br></code></pre></td></tr></table></figure><p>This will output <code>0x1b</code> (27 in decimal is 1b inhexadecimal).</p><h3 id="hex-to-decimal">Hex to Decimal</h3><p>The conversion of a hexadecimal (hex) number to a decimal number inPython can be done using the built-in <code>int()</code> function,specifying the base as 16 (since hexadecimal is base 16).</p><p>Here's an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">hex_number = <span class="hljs-string">&quot;0x1a&quot;</span> <span class="hljs-comment"># hex_number is a string representation of a hexadecimal number.</span><br>dec_number = <span class="hljs-built_in">int</span>(hex_number, <span class="hljs-number">16</span>) <span class="hljs-comment"># dec_number is now a decimal (base 10) representation of hex_number.</span><br><span class="hljs-built_in">print</span>(dec_number)<br><br></code></pre></td></tr></table></figure><p>This will output: <code>26</code></p><p>In this case, the hexadecimal number <code>1a</code> corresponds tothe decimal number <code>26</code>.</p><p>The <code>int()</code> function in Python can convert a stringrepresentation of a number in any base (between 2 and 36) to a decimalinteger. When you pass in '16' as the second argument, you're telling itto interpret the string as a hexadecimal number.</p><h1 id="restful-api">RESTful API</h1><p>RESTful API is a type of web API that uses HTTP methods to interactwith resources. REST stands for Representational State Transfer, andit's a set of design principles for creating networked applications.</p><p>Here's a brief overview of the basic principles of REST:</p><ol type="1"><li><strong>Client-Server Architecture:</strong> REST APIs follow aclient-server model, where the client sends a request to the server andwaits for a response. The client and server are independent and can bedeveloped separately.</li><li><strong>Stateless:</strong> Each request from the client to theserver must contain all the information needed to understand and processthe request. The server shouldn't store any information about theclient's state between requests.</li><li><strong>Cacheable:</strong> Responses from the server can be cachedby the client. This can improve performance by reducing the need forrepeated requests.</li><li><strong>Uniform Interface:</strong> REST APIs should have aconsistent, uniform interface, which makes them easier to use. Thisinvolves using standard HTTP methods (like GET, POST, PUT, DELETE),using resource URIs to identify resources, and using standard HTTPresponse codes.</li><li><strong>Layered System:</strong> REST APIs can be composed ofmultiple layers, each performing specific tasks. For example, theremight be a layer for handling requests, a layer for processing data, anda layer for storing data.</li></ol><p>A RESTful API is typically used to allow different software systemsto communicate with each other. In your case, you would use a RESTfulAPI to allow your Swift front-end to communicate with your Pythonback-end. The Swift code would send HTTP requests to the API, and theAPI would respond with the requested data.</p><h1 id="cat"><code>cat</code></h1><p>You can use <code>cat</code> command in the terminal to check thecontent of a file.</p><h1 id="pycharm-python-interpreter-problem">PyCharm Python interpreterproblem</h1><p>Look at the following situation and see if you are able to figure itout:</p><p>I am working on a flask project. have finished the project beforewith PyCharm and I am using the PyCharm to open it. Now it is promptingthat package requirements 'python-dotev == 1.0.0', 'Flask == 2.3.2' notsatisfied. I clicked on the install package, got "Cannot set up a pythonSDK at Python 3.8 (serverProj)(/Users/ray/rayfile/serverProj/venv/bin/python). The SDK seemsinvalid.”</p><p>Solution:</p><p>This issue seems to be due to a problem with the Python interpreterselected for your project in PyCharm. The interpreter might beimproperly configured, or the virtual environment associated with theproject might be corrupted.</p><p>Here are some steps you can follow to try to resolve this:</p><ol type="1"><li><strong>Ensure that Python is correctly installed</strong>: Open aterminal (outside of PyCharm) and type <code>python3 --version</code>.This should return the version of Python installed. If it doesn't, youmight need to install Python.</li><li><strong>Recreate the virtual environment</strong>: It's possiblethat your project's virtual environment is corrupted. Navigate to yourproject's directory in terminal, delete the existing 'venv' directory(<code>rm -rf venv</code>), and create a new one using<code>python3 -m venv venv</code>.</li><li><strong>Reconfigure your PyCharm interpreter</strong>: In PyCharm,go to Preferences -&gt; Project -&gt; Python Interpreter. Add a newinterpreter, and select "Existing environment". Navigate to the Pythonexecutable in your newly created 'venv' directory (it should be at/path-to-your-project/venv/bin/python). Set this as your projectinterpreter.</li><li><strong>Reinstall the packages</strong>: Try installing'python-dotenv' and 'Flask' again. You can do this in PyCharm or fromthe terminal by activating your virtual environment(<code>source venv/bin/activate</code>), and then using pip to installthe packages(<code>pip install python-dotenv==1.0.0 Flask==2.3.2</code>).</li></ol><h1 id="and-in-url"><code>?</code> and <code>&amp;</code> in URL</h1><p>Here I will provide an example of RESTful API to better illustratewhat a RESTful API is and dive deeper in to the URL’s world.</p><hr /><h2 id="example-1">Example:</h2><p>While I was developing an API for data querying for the company, Ihad the following requirement:</p><p>I need to write a function in python flask with the entry point as"/data-api/top-pairs/<exchange>?endDate=<end_date>&amp;days=<days>".</p><p>Query string <code>endDate</code> and <code>days</code> areoptional</p><p>Default <code>endDate</code> = current UTC date and default<code>days</code> is 7.</p><p>The function returns the link</p><p><strong>Solution</strong></p><p>Here's how you could define a Flask route with the endpoint<code>/data-api/top-pairs/&lt;exchange&gt;</code>, accepting optionalquery parameters <code>endDate</code> and <code>days</code>.</p><p>The function first checks if the query parameters are present in therequest, and if not, it assigns them default values. It then constructsand returns a link.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime, timedelta<br><span class="hljs-keyword">import</span> pytz<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/data-api/top-pairs/&lt;exchange&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_top_pairs</span>(<span class="hljs-params">exchange</span>):<br>    <span class="hljs-comment"># Get query parameters, provide default values if not present</span><br>    end_date = request.args.get(<span class="hljs-string">&#x27;endDate&#x27;</span>, datetime.now(pytz.utc).strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>))<br>    days = request.args.get(<span class="hljs-string">&#x27;days&#x27;</span>, <span class="hljs-number">7</span>)<br><br>    <span class="hljs-comment"># Construct and return the link</span><br>    link = <span class="hljs-string">f&quot;/data-api/top-pairs/<span class="hljs-subst">&#123;exchange&#125;</span>?endDate=<span class="hljs-subst">&#123;end_date&#125;</span>&amp;days=<span class="hljs-subst">&#123;days&#125;</span>&quot;</span><br>    <span class="hljs-keyword">return</span> link<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>In this example, <code>exchange</code> is part of the URL, while<code>endDate</code> and <code>days</code> are optional queryparameters. The function <code>get_top_pairs()</code> extracts theseparameters using <code>request.args.get()</code>, providing defaultvalues of the current date (in UTC) and 7 days if they're not present.Then, it constructs a link string and returns it.</p><p>Note: This code uses Flask's built-in request object to access thequery parameters. The <code>args</code> attribute is a MultiDict objectthat contains all the received query parameters. The <code>get()</code>method is used to access a parameter value, and allows you to provide adefault value if the parameter is not found.</p><h2 id="dive-deeper">Dive deeper</h2><p>What is the <code>?</code> and <code>&amp;</code> in the link? Ialways see those stuff in a weblink. Why here the string in the<code>@app.route()</code> is without <code>endDate</code> and<code>days</code>?</p><p>In a URL, the <code>?</code> and <code>&amp;</code> symbols are usedto specify query parameters.</p><ul><li>The <code>?</code> symbol is used to start the query parameterssection of a URL. It separates the path portion of the URL from thequery parameters.</li><li>The <code>&amp;</code> symbol is used to separate multiple queryparameters.</li></ul><p>So, in the URL<code>https://example.com/page?param1=value1&amp;param2=value2</code>,<code>param1</code> and <code>param2</code> are query parameters withrespective values of <code>value1</code> and <code>value2</code>.</p><p>Regarding your second question, in the <code>@app.route()</code>decorator, you only specify the path portion of the URL. This is becausethe route is used to map a URL to a specific function in your Flaskapplication.</p><p>In your case, the route is<code>/data-api/top-pairs/&lt;exchange&gt;</code>. The<code>&lt;exchange&gt;</code> part is a variable part of the URL andFlask captures the value in this part of the URL and passes it to yourfunction as an argument.</p><p>The query parameters (<code>endDate</code> and <code>days</code> inyour case) are not part of the route because they are optional and theirorder does not matter. They are accessed inside your function using<code>request.args.get()</code>. This is a dictionary-like object thatallows you to access the query parameters by their name.</p><p>The route does not need to know about these parameters. It only needsto know about the fixed and variable parts of the path of the URL. It'sthe job of your function to handle the query parameters, not theroute.</p><h1 id="tips-for-preventing-typos">Tips for preventing typos</h1><p>I hate typo!!!!!!!!!!!!!!!!!!!!!</p><p>Typos can sometimes be very tricky to spot, especially when theyresult in valid but incorrect code, as was the case here. They can be acommon source of bugs that are hard to find.</p><p>Here are a few suggestions to minimize the impact of typos:</p><ol type="1"><li><strong>Use an Integrated Development Environment (IDE)</strong>:Most IDEs have features like syntax highlighting and autocomplete thatcan help spot typos. Some can even detect some types of bugs before youeven run your code.</li><li><strong>Code Reviews</strong>: Having another set of eyes look overyour code can often spot mistakes that you might have missed.</li><li><strong>Testing</strong>: Writing tests for your code can helpensure that it's doing what you expect and can help catch bugsintroduced by typos.</li><li><strong>Take Breaks</strong>: Sometimes, if you've been looking atthe same piece of code for a long time, it can be hard to spot mistakes.Taking a short break can help reset your perspective and make it easierto see errors.</li><li><strong>Pair Programming</strong>: This is a technique where twoprogrammers work together at one workstation. One, the driver, writesthe code while the other, the observer or navigator, reviews each lineof code as it is typed in. The two programmers switch rolesfrequently.</li></ol><p>Remember, everyone makes mistakes and that's okay. What's importantis learning from them and finding ways to minimize them in the future.And remember, even the best programmers often find that "the problem wasa typo" after a long debugging session!</p>]]></content>
    
    
    <categories>
      
      <category>Daily Logs</category>
      
      <category>Intern Log</category>
      
      <category>Tech Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intern</tag>
      
      <tag>Intern Log</tag>
      
      <tag>Python</tag>
      
      <tag>Python Grammar</tag>
      
      <tag>PyCharm Professional</tag>
      
      <tag>Intern At 300K</tag>
      
      <tag>Learning Log</tag>
      
      <tag>Tech</tag>
      
      <tag>I/O</tag>
      
      <tag>Error Explanation</tag>
      
      <tag>RESTful API</tag>
      
      <tag>Command Line</tag>
      
      <tag>URL</tag>
      
      <tag>Programming Tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intern study summary - Jun 15 Thu</title>
    <link href="/2023/06/23/Intern-study-summary-Jun-15-Thu/"/>
    <url>/2023/06/23/Intern-study-summary-Jun-15-Thu/</url>
    
    <content type="html"><![CDATA[<h1 id="intern-study-summary---jun-15-thu">Intern study summary - Jun 15Thu</h1><p>This blog is a record for what I learned during my internship at300K—a quant company.</p><p>I spent most of my day on fixing bugs of the project. Thus this blogmight include less new information.</p><h1 id="asymmetric-encryption">Asymmetric Encryption</h1><p>Think about a scenario: Alice is communicating with Bob by mail. Theproblem is that they do not want other people to see their conversationbut they cannot ensure that people won’t see their mails(other peoplemight be the courier or other people who had access during the postingprocess).</p><p>Thus they figured a way to encrypt the mail. For example, they letevery character move to the next one: “I love you” become “J mpwf zpv”.The way to cipher the mail is also called a<strong><em>key</em></strong>. Anyone with the cipher key could decipherthe mail. However, a new problem came out: how can they tell each otherabout the way of encrypting? They cannot send the key to each othersince the sending process could be monitored.</p><p>The above mentioned way of encrypting is called symmetric encryption,where the same key is used for both encryption and decryption.</p><img src="/2023/06/23/Intern-study-summary-Jun-15-Thu/symmetric-encrypt.jpeg" class="" title="symmetric encryption"><p>Now, to solve the problem of having to send the key, a new way ofencrypting was invented, which is the asymmetric encryption.</p><p>Think about a mail box with two doors.</p><p>One of the door is a tiny small door that only allows putting inmails. The second door is a bigger door. Only through this door can amail be taken out.</p><p>Each door is paired with a key, of course. The key to open the firstdoor (that only allows putting in mails) is called <strong><em>publickey(pk)</em></strong>. The second key is thus called a<strong><em>private key</em></strong>, or <strong><em>secretkey</em></strong>(<strong><em>sk</em></strong>).</p><p>Now, let’s go through how this weird box solved the problem ofsymmetric encrypt:</p><p>Before Bob send an mails to Alice, Alice send this mail box with twodoor aforementioned and a public key to Bob. Once Bob got the box andthe public key, Bob put an mail into the box. Then send the mail whichis inside the box back to Alice. Since Alice did not give her privatekey to anyone, no one could take the mail out of the box until Alice getthe box.</p><p>This solution made the communicating process much securer. The mailitself is called <em>plaintext</em>, the box with mail inside is called<em>ciphertext</em> (I use putting a mail into a box as a metaphor ofcipher.)</p><img src="/2023/06/23/Intern-study-summary-Jun-15-Thu/assymetric-encrypt.jpeg" class="" title="assymmetric encryption"><h1 id="make"><code>make</code></h1><p><code>make</code> is a build automation tool that automaticallybuilds executable programs and libraries from source code by readingfiles called <code>Makefiles</code> which specify how to derive thetarget program.</p><p>If you are looking to use the <code>make</code> command on your Mac,here's what you should do:</p><ol type="1"><li><p>Install Xcode: Xcode is a free development tool from Apple.<code>make</code> is part of this toolset. To install Xcode, you need togo to the Apple App Store, search for Xcode, and install it.</p></li><li><p>Once you have Xcode installed, open a terminal window (you canfind Terminal by searching for it in Spotlight - the magnifying glassicon at the top right of your screen).</p></li><li><p>In the Terminal, type the following command to install CommandLine Tools, which includes <code>make</code>:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">xcode-select --install<br></code></pre></td></tr></table></figure><p>You might be prompted for your password. Type it in and press enter.This will start the download and installation process.</p></li><li><p>After the installation is completed, you can verify theinstallation by typing <code>make -v</code> in the Terminal. If<code>make</code> is installed, you'll see some version informationoutputted.</p></li></ol><p>In case you have already installed Xcode and Command Line Tools, andyou're just looking for how to use the <code>make</code> command, here'san example:</p><p>Let's say you have a C program and you want to compile it using<code>make</code>.</p><p>First, create a file named <code>Makefile</code> in your projectdirectory and it might look something like this:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">myprogram: myprogram.c</span><br>    gcc -o myprogram myprogram.c<br></code></pre></td></tr></table></figure><p>This <code>Makefile</code> tells <code>make</code> how to build yourprogram. Here <code>myprogram</code> is the target,<code>myprogram.c</code> is the dependency, and<code>gcc -o myprogram myprogram.c</code> is the command<code>make</code> will run to create or update the target.</p><p>Then you can just run <code>make</code> in your terminal:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make<br></code></pre></td></tr></table></figure><p>This will compile your <code>myprogram.c</code> file into anexecutable called <code>myprogram</code>.</p><p>If your source code changes, you can recompile just by running<code>make</code> again. If your code hasn't changed, <code>make</code>won't do anything.</p><h2id="make-nothing-to-be-done-for-xxxx."><code>make: Nothing to be done for 'xxxx'.</code></h2><p>I got this problem when I have the <code>'xxxx'</code> in myMakefile. Make sure that the Makefile the format is the same. For a newmake command, use <code>tab</code> instead of <code>space</code>, Ifound PyCharm will automatically convert <code>tab</code> to<code>space</code> which took me a while to debug.</p><h1 id="xarray-library-in-python"><code>xarray</code> library inPython</h1><p>I need to merge two <code>DataArrays</code> together when I wasprocessing the data.</p><p>Here is the detailed documentation for <code>xarray</code>: <ahref="https://docs.xarray.dev/en/stable/user-guide/combining.html#concatenate">Documentation</a></p><h2 id="concat">concat</h2><p>Here is a visual sense of concat:</p><img src="/2023/06/23/Intern-study-summary-Jun-15-Thu/xarray-concat.jpeg" class="" title="xarray concat"><p>Here is the <ahref="https://www.youtube.com/watch?v=xdrcMi_FB8Q&amp;t=1102s&amp;ab_channel=WestDRI">video</a>I watched to learn about <code>xarray</code>, they also compared it with<code>numpy</code> and <code>pandas</code>, which might be helpful forthose who are familiar with those two library.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> xarray <span class="hljs-keyword">as</span> xr<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-meta">&gt;&gt;&gt; </span>data = xr.DataArray(<br><span class="hljs-meta">... </span>np.random.random(size=(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)),<br><span class="hljs-meta">... </span>dims=(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>),<br><span class="hljs-meta">... </span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>data<br>&lt;xarray.DataArray (y: <span class="hljs-number">4</span>, x: <span class="hljs-number">3</span>)&gt;<br>array([[<span class="hljs-number">0.66017383</span>, <span class="hljs-number">0.01435655</span>, <span class="hljs-number">0.82392498</span>],<br>       [<span class="hljs-number">0.06476051</span>, <span class="hljs-number">0.6504625</span> , <span class="hljs-number">0.61194439</span>],<br>       [<span class="hljs-number">0.40693448</span>, <span class="hljs-number">0.22710373</span>, <span class="hljs-number">0.30344243</span>],<br>       [<span class="hljs-number">0.06840932</span>, <span class="hljs-number">0.32321194</span>, <span class="hljs-number">0.13938409</span>]])<br>Dimensions without coordinates: y, x<br><span class="hljs-meta">&gt;&gt;&gt; </span>data2 = xr.DataArray(np.random.random(size=(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)),dims=(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>),)<br><span class="hljs-meta">&gt;&gt;&gt; </span>data2<br>&lt;xarray.DataArray (y: <span class="hljs-number">4</span>, x: <span class="hljs-number">3</span>)&gt;<br>array([[<span class="hljs-number">0.90414607</span>, <span class="hljs-number">0.12080436</span>, <span class="hljs-number">0.12541235</span>],<br>       [<span class="hljs-number">0.68558428</span>, <span class="hljs-number">0.27262736</span>, <span class="hljs-number">0.74151799</span>],<br>       [<span class="hljs-number">0.21410586</span>, <span class="hljs-number">0.02924536</span>, <span class="hljs-number">0.32955468</span>],<br>       [<span class="hljs-number">0.01220016</span>, <span class="hljs-number">0.25980773</span>, <span class="hljs-number">0.47056426</span>]])<br>Dimensions without coordinates: y, x<br><span class="hljs-meta">&gt;&gt;&gt; </span>data3 = xr.DataArray(np.random.random(size=(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>)),dims=(<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;x&quot;</span>),)<br><span class="hljs-meta">&gt;&gt;&gt; </span>data3<br>&lt;xarray.DataArray (y: <span class="hljs-number">4</span>, x: <span class="hljs-number">4</span>)&gt;<br>array([[<span class="hljs-number">0.19104632</span>, <span class="hljs-number">0.40055872</span>, <span class="hljs-number">0.20014418</span>, <span class="hljs-number">0.60157153</span>],<br>       [<span class="hljs-number">0.94211448</span>, <span class="hljs-number">0.21033792</span>, <span class="hljs-number">0.63576454</span>, <span class="hljs-number">0.77343922</span>],<br>       [<span class="hljs-number">0.3038103</span> , <span class="hljs-number">0.70945801</span>, <span class="hljs-number">0.95828555</span>, <span class="hljs-number">0.19862075</span>],<br>       [<span class="hljs-number">0.73792562</span>, <span class="hljs-number">0.52394306</span>, <span class="hljs-number">0.9605408</span> , <span class="hljs-number">0.48479543</span>]])<br>Dimensions without coordinates: y, x<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>xr.concat([data, data2], dim = <span class="hljs-string">&quot;y&quot;</span>)<br>&lt;xarray.DataArray (y: <span class="hljs-number">8</span>, x: <span class="hljs-number">3</span>)&gt;<br>array([[<span class="hljs-number">0.66017383</span>, <span class="hljs-number">0.01435655</span>, <span class="hljs-number">0.82392498</span>],<br>       [<span class="hljs-number">0.06476051</span>, <span class="hljs-number">0.6504625</span> , <span class="hljs-number">0.61194439</span>],<br>       [<span class="hljs-number">0.40693448</span>, <span class="hljs-number">0.22710373</span>, <span class="hljs-number">0.30344243</span>],<br>       [<span class="hljs-number">0.06840932</span>, <span class="hljs-number">0.32321194</span>, <span class="hljs-number">0.13938409</span>],<br>       [<span class="hljs-number">0.90414607</span>, <span class="hljs-number">0.12080436</span>, <span class="hljs-number">0.12541235</span>],<br>       [<span class="hljs-number">0.68558428</span>, <span class="hljs-number">0.27262736</span>, <span class="hljs-number">0.74151799</span>],<br>       [<span class="hljs-number">0.21410586</span>, <span class="hljs-number">0.02924536</span>, <span class="hljs-number">0.32955468</span>],<br>       [<span class="hljs-number">0.01220016</span>, <span class="hljs-number">0.25980773</span>, <span class="hljs-number">0.47056426</span>]])<br>Dimensions without coordinates: y, x<br><span class="hljs-meta">&gt;&gt;&gt; </span>data<br>&lt;xarray.DataArray (y: <span class="hljs-number">4</span>, x: <span class="hljs-number">3</span>)&gt;<br>array([[<span class="hljs-number">0.66017383</span>, <span class="hljs-number">0.01435655</span>, <span class="hljs-number">0.82392498</span>],<br>       [<span class="hljs-number">0.06476051</span>, <span class="hljs-number">0.6504625</span> , <span class="hljs-number">0.61194439</span>],<br>       [<span class="hljs-number">0.40693448</span>, <span class="hljs-number">0.22710373</span>, <span class="hljs-number">0.30344243</span>],<br>       [<span class="hljs-number">0.06840932</span>, <span class="hljs-number">0.32321194</span>, <span class="hljs-number">0.13938409</span>]])<br>Dimensions without coordinates: y, x<br><span class="hljs-meta">&gt;&gt;&gt; </span>data2<br>&lt;xarray.DataArray (y: <span class="hljs-number">4</span>, x: <span class="hljs-number">3</span>)&gt;<br>array([[<span class="hljs-number">0.90414607</span>, <span class="hljs-number">0.12080436</span>, <span class="hljs-number">0.12541235</span>],<br>       [<span class="hljs-number">0.68558428</span>, <span class="hljs-number">0.27262736</span>, <span class="hljs-number">0.74151799</span>],<br>       [<span class="hljs-number">0.21410586</span>, <span class="hljs-number">0.02924536</span>, <span class="hljs-number">0.32955468</span>],<br>       [<span class="hljs-number">0.01220016</span>, <span class="hljs-number">0.25980773</span>, <span class="hljs-number">0.47056426</span>]])<br>Dimensions without coordinates: y, x<br><span class="hljs-meta">&gt;&gt;&gt; </span>xr.concat([data, data3], dim = <span class="hljs-string">&quot;x&quot;</span>)<br>&lt;xarray.DataArray (y: <span class="hljs-number">4</span>, x: <span class="hljs-number">7</span>)&gt;<br>array([[<span class="hljs-number">0.66017383</span>, <span class="hljs-number">0.01435655</span>, <span class="hljs-number">0.82392498</span>, <span class="hljs-number">0.19104632</span>, <span class="hljs-number">0.40055872</span>,<br>        <span class="hljs-number">0.20014418</span>, <span class="hljs-number">0.60157153</span>],<br>       [<span class="hljs-number">0.06476051</span>, <span class="hljs-number">0.6504625</span> , <span class="hljs-number">0.61194439</span>, <span class="hljs-number">0.94211448</span>, <span class="hljs-number">0.21033792</span>,<br>        <span class="hljs-number">0.63576454</span>, <span class="hljs-number">0.77343922</span>],<br>       [<span class="hljs-number">0.40693448</span>, <span class="hljs-number">0.22710373</span>, <span class="hljs-number">0.30344243</span>, <span class="hljs-number">0.3038103</span> , <span class="hljs-number">0.70945801</span>,<br>        <span class="hljs-number">0.95828555</span>, <span class="hljs-number">0.19862075</span>],<br>       [<span class="hljs-number">0.06840932</span>, <span class="hljs-number">0.32321194</span>, <span class="hljs-number">0.13938409</span>, <span class="hljs-number">0.73792562</span>, <span class="hljs-number">0.52394306</span>,<br>        <span class="hljs-number">0.9605408</span> , <span class="hljs-number">0.48479543</span>]])<br>Dimensions without coordinates: y, x<br></code></pre></td></tr></table></figure><h1 id="dex-decentralized-exchanges">DEX (decentralized exchanges)</h1><p>DEX and CEX refer to two types of cryptocurrency exchanges:Decentralized Exchanges (DEX) and Centralized Exchanges (CEX).</p><p>CEXs operate similarly to traditional financial exchanges. They aremanaged by a central authority (the company running the exchange), whichprovides a platform for buyers and sellers to trade cryptocurrencies.They handle the security of users' funds and users' private keys areheld by the exchange. Examples of CEXs include Binance, Coinbase, andKraken.</p><p>DEXs, on the other hand, operate without a central authority. Theyuse blockchain technology to enable direct peer-to-peer cryptocurrencytransactions. Users keep control of their private keys and funds, whichadds to the security, but also means users are fully responsible fortheir own security. Examples of DEXs include Uniswap, SushiSwap, andPancakeSwap.</p><p>Key differences include:</p><ol type="1"><li>Custody: In CEX, the exchange has custody of the funds while in DEX,users have full control of their funds.</li><li>Anonymity: DEXs often don't require user identification, making themmore anonymous than CEXs, which usually require some form of KYC (KnowYour Customer) process.</li><li>Number and Types of Assets: CEXs often have a wider range ofcryptocurrencies and other assets, while DEXs mainly focus on tokens ofa specific blockchain (like ERC20 tokens for Ethereum).</li><li>Trust: In CEXs, users need to trust the exchange, while in DEXs,trust is based on smart contracts and the underlying blockchaintechnology.</li></ol><h2 id="blockchain">blockchain</h2><p>A blockchain is a type of distributed ledger technology that storesdata across multiple systems in a network. It's designed to be secure,transparent, and resistant to modification of the data. This data isstored in blocks, and each block is linked to the one before it, forminga chain (hence the name, blockchain).</p><p>Here's how it works in a bit more detail:</p><ol type="1"><li><strong>Data Transactions</strong>: When a transaction occurs (likea Bitcoin being sent from one person to another), that transaction isgrouped together with other transactions that have occurred in the sametime frame into a block.</li><li><strong>Block Verification</strong>: This block is then sent to allthe nodes in the network. Nodes are computers that are participating inthe blockchain network. They have a copy of the entire blockchain andwork to verify the transactions in the new block.</li><li><strong>Consensus</strong>: Once the nodes reach consensus andconfirm that the transactions in the block are valid, the block is addedto the chain. The new block includes a unique identifier called acryptographic hash, as well as the hash of the previous block in thechain, which is what links the blocks together in a chain and makes theblockchain secure.</li></ol><p>One of the most famous uses of blockchain technology is forcryptocurrencies like Bitcoin, but there are many other potential uses,including supply chain tracking, voting systems, identity verification,and more.</p><p>The main advantages of blockchain technology are its transparency,security, and decentralization. However, it also faces challenges, suchas scalability and the significant amount of energy required by theconsensus process in many blockchains (like Bitcoin's proof-of-worksystem).</p><h2 id="how-dex-uses-blockchain-exactly">How DEX uses blockchainexactly?</h2><p>Decentralized Exchanges (DEXs) use blockchain technology tofacilitate direct peer-to-peer transactions, bypassing the need for acentral authority.</p><p>Here's a more detailed explanation:</p><ol type="1"><li><strong>Smart Contracts</strong>: DEXs are primarily built usingsmart contracts. These are self-executing contracts with the terms ofthe agreement directly written into code. They're stored on theblockchain, which makes them transparent and immutable. In a DEX, smartcontracts are used to facilitate and automate the trading process.</li><li><strong>On-chain Transactions</strong>: All trades occur directly onthe blockchain. When a user submits a trade on a DEX, it's essentially atransaction that's broadcast to the entire network, just like any otherblockchain transaction.</li><li><strong>Liquidity Pools</strong>: In many DEXs, liquidity isprovided by users themselves through a system known as liquidity pools.Instead of an order book matching buyers and sellers, users depositpairs of tokens into a pool, creating a market that others can tradeagainst. The smart contract maintains the balance between the two tokensin the pool based on the trades happening.</li><li><strong>Wallet Integration</strong>: DEXs allow direct integrationwith decentralized wallets (like MetaMask). Since trades arewallet-to-wallet, users maintain control over their private keysthroughout the entire process, enhancing security.</li><li><strong>Token Swaps</strong>: DEXs primarily facilitate token swaps,which is the exchange of one cryptocurrency for another. This isachieved through smart contracts which handle the swap automaticallyonce the user initiates the transaction.</li></ol><p>Remember, though, that while the decentralized nature of DEXs offersadvantages like increased privacy and control over one's assets, it alsomeans that the responsibility for security rests largely with the user.If you lose access to your wallet, for instance, the DEX can't help yourecover it.</p><h2 id="more-resources">More resources:</h2><p>Here are some of passages and videos I watched:</p><p>In English:</p><ul><li>Videos:<ul><li><ahref="https://www.youtube.com/watch?v=2tTVJL4bpTU&amp;ab_channel=WhiteboardCrypto">Whatis a DEX? How A Decentralized Exchange Works</a></li><li>A good YouTube Channel: <ahref="https://www.youtube.com/c/WhiteboardCrypto">WhiteboardCrypto</a></li></ul></li></ul><p>In Chinese:</p><ul><li>Passages:<ul><li><a href="https://zhuanlan.zhihu.com/p/634263865">一文读懂 DEX去中心化交易所</a></li></ul></li><li>Videos:<ul><li><ahref="https://www.bilibili.com/video/BV1pG4y1b7HY/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d84085799dfdb99d199a04d156250394">【科普篇】什么是去中心化交易所Uniswap(dApp)以及什么是 Uni 代币动画演示中英双字幕</a></li><li><ahref="https://www.bilibili.com/video/BV1NJ411D7rf/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d84085799dfdb99d199a04d156250394">尚硅谷区块链全套教程完整版(深入掌握以太坊核心技术)</a></li></ul></li></ul><h1 id="yaml">yaml</h1><p>YAML, which stands for "YAML Ain't Markup Language," is ahuman-friendly data serialization standard for all programminglanguages. It's often used for configuration files and in applicationswhere data is being stored or transmitted. YAML files typically have theextension <code>.yaml</code> or <code>.yml</code>.</p><p>In YAML, we use indentation to represent hierarchical relationships,similar to the way it's done in Python. This can be easier to read thanother data formats like JSON or XML, where structural information can beobscured by syntactical clutter.</p><p>There are several data types that YAML can represent, but two of themost important are lists (also known as sequences) and maps (also knownas dictionaries or hashes).</p><ol type="1"><li><p><strong>Lists</strong>: Lists are simply a sequence of items. InYAML, lists are represented by each item in the list being on a new linewith the same indentation and a leading dash (<code>-</code>).</p><p>For example:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">fruits:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Apple</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Banana</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Orange</span><br></code></pre></td></tr></table></figure><p>In this case, "fruits" is a list that includes "Apple", "Banana", and"Orange".</p></li><li><p><strong>Maps</strong>: Maps are used to link together pairs ofitems. In YAML, maps are represented with a colon (<code>:</code>)between the items in each pair.</p><p>For example:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">John</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><p>In this case, "person" is a map that includes "name: John" and "age:30".</p></li></ol><p>Moreover, YAML supports complex nesting of sequences and maps. Thisallows you to create a data structure as complex as your applicationrequires. For example:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">persons:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">John</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">30</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Jane</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">25</span><br></code></pre></td></tr></table></figure><p>In this case, "persons" is a list of maps, each map represents aperson with attributes "name" and "age".</p><p>YAML files are commonly used for configuration purposes, especiallyin DevOps environments, and can be found in applications like Ansible,Kubernetes, and Docker. They are also often used for defining workflows,like GitHub Actions workflows, or setting up continuousintegration/continuous deployment (CI/CD) pipelines. Additionally, theycan be used for data exchange between languages with different datastructures, data serialization, and more.</p><h1 id="command-line-tips-pycharm">Command Line tips &amp; PyCharm:</h1><p>I am using the PyCharm professional that is the most recent versionup to today.</p><h2id="command-shift-f-to-search-every-thing-in-project"><code>command + shift + f</code>to search every thing in project</h2><p>Sometimes you can only remember a line of code or a specific specialword in one of the files in your project. When you are trying to locatesuch words, or trying to local such files by such words or lines ofcodes, you could try <code>command + shift + f</code>. This command willfind all the occurrence of your input string in all the files.</p><h2 id="command-shift-o-to-search-file"><code>command + shift + o</code>to search file</h2><p>This is used to such a specific file. For example, you want to open afile named “self-destruct.py”, you could search “self-destruct.py” afterusing <code>command + shift + o</code>, then click <code>return</code>on your keyboard.</p><h2 id="cc-and-w"><code>Cc</code> and <code>W</code></h2><p>When you are trying to local a specific word that must to totallyidentical to your input, you could use <code>Cc</code> and<code>W</code>. This would be useful when you are trying to replacecertain word with another one.</p><p><code>Cc</code> is matching with the same case. When this is clicked,“Ray” and “ray” is not the same word. Which means you cannot find “ray”by searching “Ray”.</p><p><code>W</code> is searching the whole word. When this is clicked, youwon’t find “Ray-is-smart” or “Rayisexcellent” by searching “Ray”.</p>]]></content>
    
    
    <categories>
      
      <category>Daily Logs</category>
      
      <category>Intern Log</category>
      
      <category>Tech Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intern</tag>
      
      <tag>Intern Log</tag>
      
      <tag>Python</tag>
      
      <tag>Python Grammar</tag>
      
      <tag>PyCharm</tag>
      
      <tag>PyCharm Professional</tag>
      
      <tag>Terminal</tag>
      
      <tag>Terminal Command</tag>
      
      <tag>Intern At 300K</tag>
      
      <tag>Learning Log</tag>
      
      <tag>Tech</tag>
      
      <tag>Decentralized Exchange</tag>
      
      <tag>Dex</tag>
      
      <tag>xarray</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intern study summary - Jun 14 Wed</title>
    <link href="/2023/06/14/Intern-study-summary-Jun-14-Wed/"/>
    <url>/2023/06/14/Intern-study-summary-Jun-14-Wed/</url>
    
    <content type="html"><![CDATA[<style>.tog-button {    color: white;  border-radius: 20px; /* Rounded corners */  /* border: 10px;  */  /* Remove default button border */  /* border-color: white; */  padding: 10px 20px; /* Add some padding */  text-decoration: none; /* Remove default underline */  cursor: pointer; /* Change cursor on hover */  background-color: transparent; /* Transparent background */  color: white; /* Add some color */}.tog-button:hover {  background-color: #ddd; /* Add a hover effect */  color: black;}.tog-content {    background-color: rgba(255, 255, 255, 0.1);    border-radius: 5px;    /* color: white; */    /* boarder: 10px; */}</style><h1 id="python">Python</h1><h2 id="polymorphism">Polymorphism</h2><h3id="does-python-have-the-same-thing-as-javas-polymorphism-for-example-i-have-class-car-price-int-age-int-name-strand-class-bmwcar-power-str-color-str-when-i-declare-a-function-as-get_car_infocar-car-can-i-input-an-instance-of-bmw-will-i-be-able-to-access-the-power-and-color-attribute-of-the-input-which-is-type-car">Doespython have the same thing as Java's Polymorphism? For example, I have<code>class Car: price: int; age: int; name: str</code>and<code>class BMW(car): power: str; color: str</code>, when I declare afunction as <code>get_car_info(car: Car)</code> can I input an instanceof <code>BMW</code>? will i be able to access the <code>power</code> and<code>color</code> attribute of the input, which is type<code>Car</code>?</h3><div class="tog-container"><p><button class="tog-button">Show/Hide Answer</button></p></div><div class="tog-content" style="display: none;"><p>Yes, Python does support a form of polymorphism, but it is somewhatdifferent from Java's. Python's typing is dynamic, whereas Java's isstatic. In Python, if an object has a method or property, you can useit, regardless of the object's type. This concept is often summarized bythe phrase "duck typing": If it walks like a duck and quacks like aduck, it's a duck.</p><p>In your example, you define <code>Car</code> and <code>BMW</code>classes, and then a function <code>get_car_info(car: Car)</code>. Thetype hint <code>Car</code> is just that: a hint. Python will allow youto pass any object to <code>get_car_info</code>. If the object has allthe properties and methods the function tries to use, the function willwork fine.</p><p>So, yes, you can pass a <code>BMW</code> instance to<code>get_car_info</code>. Whether you can access <code>power</code> and<code>color</code> depends on the body of <code>get_car_info</code>. Ifthe function tries to access those properties, it will work fine with a<code>BMW</code> instance. If you pass in a <code>Car</code> instancethat doesn't have those properties, however, the function will raise anAttributeError.</p><p>Here is an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, price: <span class="hljs-built_in">int</span>, age: <span class="hljs-built_in">int</span>, name: <span class="hljs-built_in">str</span></span>):<br>        self.price = price<br>        self.age = age<br>        self.name = name<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BMW</span>(<span class="hljs-title class_ inherited__">Car</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, price: <span class="hljs-built_in">int</span>, age: <span class="hljs-built_in">int</span>, name: <span class="hljs-built_in">str</span>, power: <span class="hljs-built_in">str</span>, color: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__(price, age, name)<br>        self.power = power<br>        self.color = color<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_car_info</span>(<span class="hljs-params">car: Car</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Name: <span class="hljs-subst">&#123;car.name&#125;</span>, Age: <span class="hljs-subst">&#123;car.age&#125;</span>, Price: <span class="hljs-subst">&#123;car.price&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(car, BMW):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Power: <span class="hljs-subst">&#123;car.power&#125;</span>, Color: <span class="hljs-subst">&#123;car.color&#125;</span>&#x27;</span>)<br><br>my_bmw = BMW(<span class="hljs-number">30000</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;BMW X5&#x27;</span>, <span class="hljs-string">&#x27;250 hp&#x27;</span>, <span class="hljs-string">&#x27;Red&#x27;</span>)<br>get_car_info(my_bmw)<br><br></code></pre></td></tr></table></figure><p>Here, the <code>get_car_info</code> function first checks whether the<code>car</code> is an instance of <code>BMW</code> before trying toaccess the <code>power</code> and <code>color</code> attributes,avoiding an AttributeError when used with a <code>Car</code>instance.</p><p>It's worth mentioning that Python's approach to polymorphism is moreflexible than Java's, but it also has downsides. The lack of stricttyping can lead to errors that are only caught at runtime, rather thanat compile-time like in Java. You might want to consider using Python'soptional type checking features to get some of the benefits of statictyping while keeping the flexibility of Python.</p></div><script>let togButton = document.querySelector('.tog-button');let togContent = document.querySelector('.tog-content');togButton.addEventListener('click', function() {    console.log("clicked")  if(togContent.style.display == 'none') {    togContent.style.display = 'block';  } else {    togContent.style.display = 'none';  }});</script><h1 id="pyenv">pyenv</h1><h2id="use-pyenv-to-change-the-python-version-of-your-system-global">Usepyenv to change the python version of your system (global)</h2><p><code>pyenv</code> is a simple yet powerful Python version managementtool. Here are the steps to change the global Python version using<code>pyenv</code>:</p><ol type="1"><li><p><strong>Install <code>pyenv</code></strong>: Before you use<code>pyenv</code>, you need to install it. Here is the command toinstall <code>pyenv</code> using Homebrew on macOS:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew update<br>brew install pyenv<br></code></pre></td></tr></table></figure><p>For Linux, you can use the <code>pyenv-installer</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl &lt;https://pyenv.run&gt; | bash<br></code></pre></td></tr></table></figure><p>Make sure you follow the instructions provided by the installer toset up your shell for pyenv usage.</p></li><li><p><strong>List Available Python Versions</strong>: Use the<code>pyenv install --list</code> command to see the list of allavailable Python versions. It should display a list of versions likethis:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">2.7.17<br>3.5.9<br>3.6.10<br>3.7.7<br>3.8.2<br>...<br></code></pre></td></tr></table></figure></li><li><p><strong>Install a Specific Python Version</strong>: You caninstall a specific Python version using <code>pyenv</code>. For example,to install Python 3.8.2, you would use this command:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pyenv</span> install <span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Set the Global Python Version</strong>: After the Pythonversion you want is installed, you can set it as the global version with<code>pyenv global</code>. For example, to set Python 3.8.2 as theglobal version, you would use this command:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pyenv</span> global <span class="hljs-number">3</span>.<span class="hljs-number">8</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Confirm the Change</strong>: To confirm that the globalPython version has been changed, you can use the<code>python --version</code> command. It should display something like<code>Python 3.8.2</code>, indicating that the version has beenchanged.</p></li></ol><p>That's it! You have successfully changed the global Python versionusing <code>pyenv</code>. Keep in mind that changing the global Pythonversion will affect all the Python programs on your system, so make sureyou really want to do this before you proceed.</p><h2 id="wont-work">Won’t work</h2><p>Sometimes you will find that even you followed the stepsaforementioned, when you type <code>python3 --version</code>, you willstill see the old version, which means the command<code>pyenv global 3.8.2</code>is not working. Keep reading:</p><p>If you have just installed <code>pyenv</code> and have set the globalPython version, but when running <code>python3 --version</code> theversion shown is still the system version (Python 3.8.9 in this case),it suggests that your shell environment might not be set up properly touse <code>pyenv</code>.</p><p>One of the common reasons for this is that <code>pyenv</code> is notproperly integrated in your shell.</p><p>Here is how you can do it:</p><ol type="1"><li><p><strong>Add <code>pyenv</code> to bash so command line knowsabout <code>pyenv</code></strong>: Depending on your shell, you need toadd these lines to your shell's configuration file (<code>.bashrc</code>or <code>.bash_profile</code> for bash, <code>.zshrc</code> forZsh):</p><p>For <code>bash</code>:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> -e &#x27;<span class="hljs-keyword">if</span> <span class="hljs-keyword">command</span> -v pyenv 1&gt;<span class="hljs-string">/dev/null</span> 2&gt;&amp;1; then\\n  eval <span class="hljs-string">&quot;$(pyenv init -)&quot;</span>\\nfi&#x27; &gt;&gt; ~<span class="hljs-string">/.bashrc</span><br>source ~<span class="hljs-string">/.bashrc</span><br><br></code></pre></td></tr></table></figure><p>For <code>zsh</code>:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">echo</span> -e &#x27;<span class="hljs-keyword">if</span> <span class="hljs-keyword">command</span> -v pyenv 1&gt;<span class="hljs-string">/dev/null</span> 2&gt;&amp;1; then\\n  eval <span class="hljs-string">&quot;$(pyenv init -)&quot;</span>\\nfi&#x27; &gt;&gt; ~<span class="hljs-string">/.zshrc</span><br>source ~<span class="hljs-string">/.zshrc</span><br><br></code></pre></td></tr></table></figure><p>These commands will append the <code>pyenv init</code> command toyour shell configuration file and then reload the shell configurationfile. The <code>pyenv init</code> command configures the shell to use<code>pyenv</code> for Python version management.</p></li><li><p><strong>Restart your shell</strong>: This ensures that thechanges take effect.</p></li><li><p><strong>Check the Python version</strong>: Now, when you type<code>python3 --version</code>, it should display<code>Python 3.8.16</code> or whatever version you set as the globalversion using <code>pyenv</code>.</p></li></ol><p>If the version is still not showing up correctly, it might be due tothe specific naming of the python binaries. Try using the command<code>python --version</code> instead of <code>python3 --version</code>.<code>pyenv</code> might have set the version correctly, but the<code>python3</code> command could still be pointing to your system'sPython installation.</p><p>If the issue persists, do check the list of Python versions installedunder <code>pyenv</code> using <code>pyenv versions</code>. This willhelp you verify whether the intended Python version is correctlyinstalled under <code>pyenv</code>. If it's not listed, you'll need toinstall it using <code>pyenv install 3.8.16</code>.</p><h1 id="pycharm">PyCharm:</h1><p>Note: I am using the newest version up to date 2023 Jun 14th ofPyCharm Professional. (MacOS with M1 Pro)</p><h2 id="install-a-python-package-in-pycharm">Install a python package inPyCharm</h2><p>Installing a Python package in PyCharm is quite simple. Here's howyou do it:</p><ol type="1"><li>Open your project in PyCharm.</li><li>Navigate to <code>File -&gt; Settings</code>. For macOS, navigate to<code>PyCharm -&gt; Preferences</code>.</li><li>In the Settings/Preferences dialog, navigate to<code>Project: [your_project_name] -&gt; Project Interpreter</code>.</li><li>In the top-right corner of the dialog, click the <code>+</code>(plus) icon to add a new package.</li><li>In the new window that opens (the Available Packages dialog), you'llsee a list of available packages. You can search for the package youwant to install by typing its name into the search box.</li><li>After you find your package, simply click the<code>Install Package</code> button at the bottom of the dialog.</li><li>Wait for PyCharm to download and install the package. You can seethe installation progress in the status bar at the bottom of thedialog.</li><li>After the installation finishes, you can close the dialog. Yourpackage is now installed and ready to use.</li></ol><p>Remember that PyCharm creates a new virtual environment for eachproject by default, so the package you've installed is only available inthe current project's environment. If you want the package to beavailable globally or in a different project, you need to install it inthe corresponding environment.</p><h1 id="command">Command</h1><h2 id="clear-the-terminal">Clear the terminal:</h2><p>You can simply type the following code to clear your screen:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">clear<br></code></pre></td></tr></table></figure><p>Yet you will find that when you scroll up, the content you typedbefore still exists. Here is one of the reasons:</p><p>The <code>clear</code> command on a Unix-based system like macOS willclear the visible window of the terminal, but it doesn't clear theterminal's scrollback buffer. That means when you scroll up, you'llstill be able to see the previous commands and output.</p><p>If you want to clear the terminal completely, including thescrollback buffer, you can use the <code>reset</code> command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reset<br></code></pre></td></tr></table></figure><p>This will not only clear the terminal screen, but also the scrollbackbuffer, so you won't be able to scroll up to see previous output.</p><p>Alternatively, if you're using the Terminal app on macOS, you can usethe keyboard shortcut <code>Cmd+K</code> to clear the screen and thescrollback buffer. This works in both bash and zsh, the default shell onmacOS as of Catalina.</p><p>Please note, always be careful when using commands that permanentlydelete history or output, especially in production environments or whenworking with sensitive data.</p><p>Note: sometimes when you use <code>reset</code>command, the effect issame as using <code>clear</code> . In this case, <code>Cmd+K</code> is abetter choice.</p><h1 id="hexo">Hexo</h1><p>I am using Hexo basing my blog. I also had some tips for how tofurther beautify your blog.</p><p>Note, you might know that Hexo could render Markdown grammar. Yet youmight not know that Hexo could also render html code in the middle ofMarkdown file. I used to write my blog in notion, yet notion, unlikeclassical markdown compiler, supported tog element which allows you tohide and show content when other people click on a button. Here is ahtml version of code you can use to achieve the same effect. Actually,you’ve seen such use at the beginning of this blog.</p><p>Here's the way to add the HTML and JavaScript code into your Markdownfile:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html">Here&#x27;s an interactive section that hides and shows content:<br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tog-container&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tog-button&quot;</span>&gt;</span>Show/Hide Answer<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tog-content&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Your answer goes here.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> togButton = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.tog-button&quot;</span>);</span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> togContent = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;.tog-content&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">  togButton.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span> (togContent.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> == <span class="hljs-string">&quot;none&quot;</span>) &#123;</span><br><span class="language-javascript">      togContent.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;block&quot;</span>;</span><br><span class="language-javascript">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">      togContent.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Please note that in the above example, the JavaScript code isembedded directly in the Markdown file. Some Markdown processors havesafety features that remove script tags. If your script is not runningafter you add it, you might want to check your Markdown processor'sdocumentation or use an external <code>.js</code> file.</p>]]></content>
    
    
    <categories>
      
      <category>Daily Logs</category>
      
      <category>Intern Log</category>
      
      <category>Tech Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intern</tag>
      
      <tag>Intern Log</tag>
      
      <tag>Python</tag>
      
      <tag>Python Grammar</tag>
      
      <tag>PyCharm</tag>
      
      <tag>PyCharm Professional</tag>
      
      <tag>Terminal</tag>
      
      <tag>Terminal Command</tag>
      
      <tag>Intern At 300K</tag>
      
      <tag>Learning Log</tag>
      
      <tag>Hexo</tag>
      
      <tag>HTML</tag>
      
      <tag>Tech</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Intern study summary - Jun 13 Tue</title>
    <link href="/2023/06/14/intern-log/"/>
    <url>/2023/06/14/intern-log/</url>
    
    <content type="html"><![CDATA[<h1 id="python">Python</h1><h2 id="pass"><code>pass</code></h2><p>In Python, the <code>pass</code> keyword is a<strong>placeholder</strong> statement. It is used when a statement isrequired syntactically, but no action needs to be performed.</p><h3 id="example.">Example.</h3><p>Suppose you're designing a new class and you know it needs aparticular method, but you aren't sure what the implementation of thatmethod should be yet. You can use <code>pass</code> as a placeholderlike so:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">future_method</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>In this code, <code>future_method</code> does nothing, but it's avalid method. Without the <code>pass</code> statement, the code wouldhave a syntax error because Python expects a block of code to follow themethod definition. The <code>pass</code> keyword is saying, "Iacknowledge that you expect something here, but I don't want to doanything."</p><p>Similarly, it can be used in conditional statements, loops, etc.where some code is expected:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> some_condition:<br>    <span class="hljs-keyword">pass</span>  <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> handle this condition</span><br><br></code></pre></td></tr></table></figure><p>In the above case, <code>pass</code> is used to indicate that thiscondition should be handled in the future.</p><p>Keep in mind, it's typically used in development phases, and in mostcases, you should eventually replace <code>pass</code> with somemeaningful code.</p><h2 id="dataclass"><code>@dataclass</code></h2><p>The <code>@dataclass</code> decorator is a feature of Pythonintroduced in Python 3.7, as part of the <code>dataclasses</code>module. It provides a convenient way to generate special methods forclasses which mainly contain data, like the <strong>init</strong>,<strong>repr</strong>, and <strong>eq</strong> methods.</p><h3 id="example">Example:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@dataclass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DogInfo</span>():<br>    name: <span class="hljs-built_in">str</span><br>    age: <span class="hljs-built_in">int</span><br><br></code></pre></td></tr></table></figure><p><code>DogInfo</code> is defined as a dataclass, which means Pythonwill automatically add special methods like <strong>init</strong>,<strong>repr</strong>, and <strong>eq</strong>.</p><h3 id="compare-to-java">Compare to Java</h3><p>Java does not have a direct equivalent to Python's dataclasses, butit does have similar features for creating simple classes that mainlycontain data.</p><p>One approach in Java is to create a simple class with private fields,and generate getter, setter, <code>equals()</code>,<code>hashCode()</code>, and <code>toString()</code> methods. Mostmodern Java IDEs can generate these methods for you.</p><p>Starting from Java 14, there's also a preview feature called<code>record</code> which provides similar functionality to Python'sdataclasses. Here's an example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">DogInfo</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>In this Java code, <code>DogInfo</code> is defined as a record withtwo fields: <code>name</code> and <code>age</code>. Java automaticallygenerates constructor, equals, hashCode, and toString methods.</p><h3id="dataclassfrozentrue-the-frozentrue"><code>@dataclass(frozen=True)</code>the <code>(frozen=True)</code></h3><p>The <code>@dataclass</code> decorator in Python comes with severalparameters that you can use to customize the behavior of the dataclass,and one of these parameters is <code>frozen</code>.</p><p>If you set <code>frozen=True</code> when you define a dataclass, itmakes the instances of that dataclass immutable, similar to a tuple.That is, once the instance has been created and its attributes have beenset, you can't change them.</p><p>If you try to change an attribute of a frozen dataclass, Pythonraises an exception. Here's an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> dataclass<br><br><span class="hljs-meta">@dataclass(<span class="hljs-params">frozen=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>    x: <span class="hljs-built_in">float</span><br>    y: <span class="hljs-built_in">float</span><br><br>p = Point(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>p.x = <span class="hljs-number">5</span>  <span class="hljs-comment"># Raises a `dataclasses.FrozenInstanceError`</span><br><br></code></pre></td></tr></table></figure><p>If you run this code, you'll get a <code>FrozenInstanceError</code>when you try to assign <code>5</code> to <code>p.x</code>.</p><p>The <code>frozen=True</code> parameter is useful when you want tocreate a dataclass that is hashable and can be used as a dictionary key,or when you want to ensure that an instance of the class won't changeonce it's been created.</p><h4 id="compare-to-javas-final-keyword">Compare to Java’s<code>final</code> keyword</h4><p>Compare with <code>final float PI</code> in Java: the<code>frozen=True</code> parameter for Python's <code>@dataclass</code>and the <code>final</code> keyword in Java serve similar purposes, butthey're not exactly the same.</p><p>The <code>frozen=True</code> parameter in Python makes it so that allattributes of an instance of a dataclass are immutable -- you can'tchange them once they're set. This is similar to how a<code>final</code> variable in Java can't be changed once it'sinitialized.</p><p>However, the <code>final</code> keyword in Java can be used inseveral contexts. When used with a variable (like<code>final float PI</code>), it makes that variable a constant -- youcan't change its value once it's initialized. When used with a class, itmeans the class can't be subclassed. When used with a method, it meansthe method can't be overridden by subclasses.</p><p>The <code>frozen=True</code> parameter in Python's<code>@dataclass</code> only affects the mutability of instances of theclass. It doesn't prevent the class from being subclassed, nor does itprevent methods from being overridden. There's no exact equivalent inPython for Java's <code>final</code> keyword when used with classes andmethods. Python's philosophy tends towards allowing greater flexibility,so "final" classes and methods are not a language feature.</p><h3 id="post_init"><code>post_init</code></h3><p>The <code>__post_init__</code> method in Python is a special methodprovided by the dataclasses module. It's a method that you can define inyour dataclass, and if it exists, it gets called automatically at theend of the generated <code>__init__</code> method.</p><p>The purpose of the <code>__post_init__</code> method is to performany additional initialization steps that you need to do beyond justsetting the attributes of your dataclass to the provided values.</p><p>Here's an example of how you might use it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> dataclass<br><br><span class="hljs-meta">@dataclass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>    x: <span class="hljs-built_in">float</span><br>    y: <span class="hljs-built_in">float</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__post_init__</span>(<span class="hljs-params">self</span>):<br>        self.magnitude = (self.x ** <span class="hljs-number">2</span> + self.y ** <span class="hljs-number">2</span>) ** <span class="hljs-number">0.5</span><br><br>p = Point(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(p.magnitude)  <span class="hljs-comment"># Outputs: 5.0</span><br><br></code></pre></td></tr></table></figure><p>In this example, after the <code>x</code> and <code>y</code>attributes are set in the <code>__init__</code> method, the<code>__post_init__</code> method is automatically called. Thiscalculates the magnitude of the point from its <code>x</code> and<code>y</code> coordinates and stores it in the <code>magnitude</code>attribute.</p><p>If you don't define a <code>__post_init__</code> method in yourdataclass, then nothing extra happens after <code>__init__</code>. Butif you do define it, then it provides a way to add some additionalinitialization behavior that goes beyond just setting attributevalues.</p><h2 id="inherit-in-python-and-java">Inherit in Python and Java</h2><p>Inheritance is a key feature in many object-oriented programminglanguages, including Python and Java. It is a mechanism that allows aclass to acquire the properties and behaviors of another class.</p><p>The class from which properties are inherited is known as the parentclass, superclass, or base class. The class that inherits thoseproperties is known as the child class, subclass, or derived class.</p><p>When a class inherits from another class in Python, it gains accessto all of the superclass's attributes and methods. This means thatobjects of the subclass can be treated as instances of the superclass,and code that works with the superclass will automatically work with thesubclass.</p><p>Python's inheritance is defined as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ParentClass</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildClass</span>(<span class="hljs-title class_ inherited__">ParentClass</span>):<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>In this example, <code>ChildClass</code> is inheriting from<code>ParentClass</code>.</p><p>Python supports both single and multiple inheritance. Singleinheritance is when a class inherits from a single superclass, whilemultiple inheritance is when a class inherits from more than onesuperclass. Here is an example of multiple inheritance:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ParentClass1</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ParentClass2</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildClass</span>(ParentClass1, ParentClass2):<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>In this example, <code>ChildClass</code> is inheriting from both<code>ParentClass1</code> and <code>ParentClass2</code>.</p><p>Java also supports inheritance, but with a key difference: Java doesnot support multiple inheritance for classes. A class in Java can onlydirectly inherit from one superclass. However, a class can implementmultiple interfaces, which is a sort of workaround for multipleinheritance.</p><p>This is how you define inheritance in Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParentClass</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ParentClass</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>In this example, <code>ChildClass</code> is inheriting from<code>ParentClass</code>.</p><p>Despite the difference in multiple inheritance, the fundamental ideabehind inheritance is the same in both languages. It's a way to organizecode, increase reusability, and set up relationships between differenttypes.</p><p>Also, Java have abstract class which might be different with whatpython’s inherit behaves.</p><h4 id="a-key-example">A key example:</h4><p>Yes, you're correct. When you create an instance of<code>AClass</code> by calling <code>AClass("t1", "t2", "t3")</code>,the <code>p1</code>, <code>p2</code>, and <code>p3</code> attributes of<code>a_class</code> will be set to "t1", "t2", and "t3"respectively.</p><p>The values "p1_attribute", "p2_attribute", and "p3_attribute"specified in the class definition are default values. They are used ifyou create an instance without providing corresponding arguments.</p><p>Here's how it works:</p><p>Try to answer the following question:</p><p>If I have code</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@dataclass(<span class="hljs-params">frozen=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AClass</span>:<br>    p1: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;p1_attribute&quot;</span><br>    p2: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;p2_attribute&quot;</span><br>    p3: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;p3_attribute&quot;</span><br></code></pre></td></tr></table></figure><p>and I have <code>a_class = AClass("t1", "t2", "t3")</code>, then the<code>p1, p2, p3</code> of <code>a_class</code> will be "t1", "t2", and"t3"?</p><style>.tog-button {    color: white;  border-radius: 20px; /* Rounded corners */  /* border: 10px;  */  /* Remove default button border */  /* border-color: white; */  padding: 10px 20px; /* Add some padding */  text-decoration: none; /* Remove default underline */  cursor: pointer; /* Change cursor on hover */  background-color: transparent; /* Transparent background */  color: white; /* Add some color */}.tog-button:hover {  background-color: #ddd; /* Add a hover effect */  color: black;}.tog-content {    background-color: rgba(255, 255, 255, 0.1);    border-radius: 5px;    /* color: white; */    /* boarder: 10px; */}</style><div class="tog-container"><p><button class="tog-button">Show/Hide Answer</button></p></div><div class="tog-content" style="display: none;"><p>Yes, it’s correct. When you create an instance of <code>AClass</code>by calling <code>AClass("t1", "t2", "t3")</code>, the <code>p1</code>,<code>p2</code>, and <code>p3</code> attributes of <code>a_class</code>will be set to "t1", "t2", and "t3" respectively. The values"p1_attribute", "p2_attribute", and "p3_attribute" specified in theclass definition are default values. They are used if you create aninstance without providing corresponding arguments. Here's how itworks:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> dataclass<br><span class="hljs-meta">@dataclass(<span class="hljs-params">frozen=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AClass</span>:<br>p1: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;p1_attribute&quot;</span><br>p2: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;p2_attribute&quot;</span><br>p3: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;p3_attribute&quot;</span><br><span class="hljs-comment"># Creating an instance with arguments</span><br>a_class = AClass(<span class="hljs-string">&quot;t1&quot;</span>, <span class="hljs-string">&quot;t2&quot;</span>, <span class="hljs-string">&quot;t3&quot;</span>)<br><span class="hljs-built_in">print</span>(a_class.p1)  <span class="hljs-comment"># Outputs: t1</span><br><span class="hljs-built_in">print</span>(a_class.p2)  <span class="hljs-comment"># Outputs: t2</span><br><span class="hljs-built_in">print</span>(a_class.p3)  <span class="hljs-comment"># Outputs: t3</span><br><span class="hljs-comment"># Creating an instance without arguments</span><br>another_class = AClass()<br><span class="hljs-built_in">print</span>(another_class.p1)  <span class="hljs-comment"># Outputs: p1_attribute</span><br><span class="hljs-built_in">print</span>(another_class.p2)  <span class="hljs-comment"># Outputs: p2_attribute</span><br><span class="hljs-built_in">print</span>(another_class.p3)  <span class="hljs-comment"># Outputs: p3_attribute</span><br></code></pre></td></tr></table></figure><p>In this code, when we create <code>a_class</code> with arguments,those arguments override the default values. But when we create<code>another_class</code> without arguments, the attributes get set tothe default values.</p></div><script>let togButton = document.querySelector('.tog-button');let togContent = document.querySelector('.tog-content');togButton.addEventListener('click', function() {    console.log("clicked")  if(togContent.style.display == 'none') {    togContent.style.display = 'block';  } else {    togContent.style.display = 'none';  }});</script><h2 id="yield"><code>yield</code></h2><p>I search several times on the <code>yiedl</code> key word in python.Even with ChatGPT, I cannot clearly understand how <code>yield</code>keyword is working in python and why we need it. One key step tounderstand it is that the <strong><code>yield</code></strong> keywordcannot be replaced with <strong><code>return</code></strong> because<strong><code>return</code></strong> in a function terminates thefunction entirely, while <strong><code>yield</code></strong> only pausesthe function. If you replace <strong><code>yield</code></strong> with<strong><code>return</code></strong>, your function will stop executingafter the first <strong><code>return</code></strong> statement itencounters, and it will not be able to produce multiple values overtime.</p><hr /><p>The <code>yield</code> keyword in Python is used in a special kind offunction called a generator. Generators are a type of iterable, likelists or tuples. Unlike lists, they don't allow indexing with arbitraryindices, but they can still be iterated through with for loops.</p><p>When the <code>yield</code> keyword is called in a function, itreturns a value and pauses execution of the function. The function canthen be resumed right where it left off, allowing it to generate asequence of results over time, instead of computing them all at once andreturning them in a list for instance.</p><p>Here's a simple example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">simple_generator</span>():<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span><br><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> simple_generator():<br>    <span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure><p>This will output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>If you only need to generate a single value from your function, thenyou can use <code>return</code> instead of <code>yield</code>. Also, ifyour function generates a small number of values, you might be able touse <code>return</code> to return them all at once in a list, ratherthan generating them one at a time with <code>yield</code>.</p><p>In summary, <code>yield</code> is a special keyword used in thecontext of Python generators, and it cannot be simply replaced with<code>return</code> without changing the function's behavior.</p><h3 id="can-i-use-a-block-of-code-to-implement-yield">Can I use a blockof code to implement <code>yield</code>?</h3><p>In Python, the <code>yield</code> keyword is used to make a functioninto a generator that can produce a sequence of results over time.However, the <code>yield</code> keyword itself does quite a bit ofbehind-the-scenes work, so it's not straightforward to replace it with afew lines of code. You would need to implement a whole class with aniterator to get equivalent behavior.</p><p>Here is a simple example of how you might do that. This exampleimplements a generator that yields the numbers 1, 2, and 3, similar tothe previous example.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleGenerator</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.current = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params">self</span>):<br>        self.current += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> self.current &gt; <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">raise</span> StopIteration<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> self.current<br><br><span class="hljs-comment"># Use the generator</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> SimpleGenerator():<br>    <span class="hljs-built_in">print</span>(value)<br><br></code></pre></td></tr></table></figure><p>In this code, the <code>SimpleGenerator</code> class has a<code>__next__</code> method that implements the logic of the generator:it keeps track of the current number, and each time<code>__next__</code> is called, it increments the number and returnsit. When the number gets bigger than 3, it raises a<code>StopIteration</code> exception, which signals that the generatoris done.</p><p>This is a more explicit way of implementing a generator, and it cangive you a clearer sense of what's going on behind the scenes when youuse the <code>yield</code> keyword. However, using <code>yield</code> isgenerally simpler and more concise, which is why it's usually preferredfor creating generators in Python.</p><h3id="but-with-yield-keyword-there-wont-be-such-thing-to-store-the-iterable-result-which-means-i-wont-be-able-to-print-the-whole-return-result-inside-of-the-method-with-yield">butwith <code>yield</code> keyword, there won't be such thing to store theiterable result, which means I won't be able to print the whole returnresult inside of the method with 'yield`?</h3><div class="tog-container"><p><button class="tog-button" name="button2">Show/HideAnswer</button></p></div><div class="tog-content" style="display: none;" name="content2"><p>You're correct. A generator (a function that uses the<code>yield</code> keyword) doesn't return a value that can be stored ina variable like a list or tuple. Instead, it produces values one at atime on-the-fly as you iterate over the generator. Here's anexample:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">simple_generator</span>():<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span><br><br><span class="hljs-comment"># This won&#x27;t work as you might expect:</span><br>result = simple_generator()<br>print(result)  <span class="hljs-comment"># Outputs: &lt;generator object simple_generator at 0x7f...&gt;</span><br><br></code></pre></td></tr></table></figure><p>When you try to print <code>result</code>, it tells you that it's agenerator object, not a list of numbers. If you want to collect all thevalues produced by a generator into a list, you can do that by passingthe generator to the <code>list</code> function:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-literal">result</span> = <span class="hljs-built_in">list</span>(simple_generator())<br>print(<span class="hljs-literal">result</span>)  <span class="hljs-comment"># Outputs: [1, 2, 3]</span><br><br></code></pre></td></tr></table></figure><p>However, it's important to remember that one of the main reasons touse generators is when you're working with a large amount of data thatwon't fit into memory all at once. In such cases, you'd generally wantto process the generator's values one at a time, rather than trying tostore them all in a list.</p></div><script>let elements = document.getElementsByName('button2');let button2 = elements[0]let elements2 = document.getElementsByName('content2');let content2 = elements2[0]button2.addEventListener('click', function() {    console.log("clicked")    console.log(content2)  if(content2.style.display == 'none') {    content2.style.display = 'block';  } else {    content2.style.display = 'none';  }});</script><h2 id="enumerate"><code>enumerate()</code></h2><p>The <code>enumerate</code> function in Python is a built-in functionthat allows you to loop over something and have an automaticcounter.</p><p>In a <code>for</code> loop, when you use<code>enumerate(sources)</code>, it returns an enumerate object, whichis an iterable that yields pairs of the form<code>(index, value)</code>. In each iteration of the loop,<code>idx</code> is the index of the current item, and<code>source</code> is the value of the current item.</p><p>Here's a simple example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;cherry&#x27;</span>]<br><br><span class="hljs-keyword">for</span> idx, fruit <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(fruits):<br>    <span class="hljs-built_in">print</span>(idx, fruit)<br></code></pre></td></tr></table></figure><p>This will output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0</span> apple<br><span class="hljs-number">1</span> banana<br><span class="hljs-number">2</span> cherry<br></code></pre></td></tr></table></figure><p>As you can see, <code>idx</code> is the index of each item in thelist, and <code>fruit</code> is the value of each item. This can be veryuseful in situations where you need to know the index of the items asyou're looping over them.</p><h2 id="iter"><code>iter()</code></h2><p>The <code>iter()</code> function in Python is a built-in functionthat returns an iterator object. An iterator is an object that can beiterated (looped) upon. An object which will return data, one element ata time when <code>next()</code> is called on it.</p><p>In more technical terms, an iterator is an object that implements theiterator protocol, which consists of the methods <code>__iter__()</code>and <code>__next__()</code>.</p><p>Here's an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>my_iter = <span class="hljs-built_in">iter</span>(my_list)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(my_iter))  <span class="hljs-comment"># Outputs: 1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(my_iter))  <span class="hljs-comment"># Outputs: 2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(my_iter))  <span class="hljs-comment"># Outputs: 3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(my_iter))  <span class="hljs-comment"># Outputs: 4</span><br><br></code></pre></td></tr></table></figure><p>In this code, <code>iter(my_list)</code> returns an iterator objectthat you can fetch values from one at a time using the<code>next()</code> function. Once all elements are exhausted,<code>next()</code> will raise a <code>StopIteration</code>exception.</p><p>Most of the time, you don't need to use <code>iter()</code> and<code>next()</code> directly, because Python's <code>for</code> loopautomatically calls them when you loop over an iterable object:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">for</span> element <span class="hljs-keyword">in</span> my_list:<br>    <span class="hljs-built_in">print</span>(element)<br><br></code></pre></td></tr></table></figure><p>This code does the same thing as the previous example, but it's a lotsimpler and clearer. The <code>for</code> loop automatically calls<code>iter(my_list)</code> to get an iterator, and then it calls<code>next()</code> on that iterator for each iteration of the loop.When <code>next()</code> raises a <code>StopIteration</code> exception,the <code>for</code> loop catches it and gracefully exits the loop.</p><h2 id="ternary-operator-in-python">ternary operator in Python</h2><h3 id="example-1">Example:</h3><p>rewrite the following Java code in Python</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (j &gt; <span class="hljs-number">1</span>) ? <span class="hljs-number">6</span> : <span class="hljs-number">7</span>; <span class="hljs-comment">// if j &gt; 1, then i = 6, else, i = 7</span><br></code></pre></td></tr></table></figure><p>Python does have a similar construct, but the syntax is differentfrom Java. Instead of <code>(j &gt; 1) ? 6 : 7</code>, in Python youwould write <code>6 if j &gt; 1 else 7</code>.</p><p>Here's an example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">j = <span class="hljs-number">5</span><br>i = <span class="hljs-number">6</span> <span class="hljs-keyword">if</span> j &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>In this Python code, <code>6 if j &gt; 1 else 7</code> is aconditional expression (often called a ternary operation). It checks if<code>j &gt; 1</code>. If <code>j &gt; 1</code> is true, it evaluates to<code>6</code>. Otherwise, it evaluates to <code>7</code>. This value isthen assigned to <code>i</code>.</p><p>This is similar to the <code>? :</code> operator in Java, but thesyntax is slightly different.</p><h1 id="git">Git</h1><h2id="differences-between-git-switch-another-branch-and-git-checkout-another-branch">Differencesbetween <code>git switch another-branch</code> and<code>git checkout another-branch</code></h2><p>In versions of Git prior to 2.23, the command<code>git checkout</code> was primarily used to switch between branchesin a Git repository. However, starting from Git 2.23, the command<code>git switch</code> was introduced as a more intuitive and saferalternative to <code>git checkout</code> when it comes to switchingbranches. Here are the main differences between the two commands:</p><ol type="1"><li>Simplicity and clarity: The <code>git switch</code> command wasintroduced to provide a clearer and more straightforward syntax forswitching branches. The name "switch" better reflects the action beingperformed, making it easier to understand its purpose at a glance.</li><li>Safety: The <code>git switch</code> command is designed to be morecautious and less error-prone than <code>git checkout</code>. When using<code>git switch</code>, Git performs additional checks to ensure thatyou don't accidentally lose work or overwrite uncommitted changes. Forexample, if you have uncommitted changes in your working directory, Gitwill refuse to switch branches unless you either commit the changes orstash them. This helps prevent data loss.</li><li>Branch creation: With <code>git switch</code>, you can create andswitch to a new branch in a single command using the<code>git switch -c &lt;new-branch&gt;</code> syntax. This combines thecreation of a branch and switching to it into a single step. Incontrast, <code>git checkout</code> requires separate commands to createand switch to a new branch (<code>git branch &lt;new-branch&gt;</code>and <code>git checkout &lt;new-branch&gt;</code>).</li><li>Replacing detached HEAD: In <code>git switch</code>, the command<code>git switch &lt;commit&gt;</code> is used to switch to a specificcommit, effectively replacing the old "detached HEAD" state. This syntaxmakes it more explicit and less error-prone to switch to a specificcommit, as opposed to <code>git checkout &lt;commit&gt;</code>.</li></ol><p>It's worth noting that <code>git checkout</code> is still supportedin recent versions of Git to maintain backward compatibility, but<code>git switch</code> is encouraged for branch switching operationsdue to its advantages in safety and simplicity.</p><h2id="git-command-for-create-and-checkout-to-a-new-branch-together">Gitcommand for create and checkout to a new branch together</h2><p>You may use <code>git checkout -b another-branch</code></p><h1 id="terminal-command">Terminal Command</h1><h2 id="split-the-command-window-to-multiple-sub-windows">Split thecommand window to multiple sub windows</h2><p>You may use <code>command</code> + <code>D</code> on key board</p>]]></content>
    
    
    <categories>
      
      <category>Daily Logs</category>
      
      <category>Intern Log</category>
      
      <category>Tech Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Intern</tag>
      
      <tag>Intern Log</tag>
      
      <tag>Python</tag>
      
      <tag>Python Grammar</tag>
      
      <tag>Terminal</tag>
      
      <tag>Terminal Command</tag>
      
      <tag>Intern At 300K</tag>
      
      <tag>Learning Log</tag>
      
      <tag>Tech</tag>
      
      <tag>Git</tag>
      
      <tag>Git Command</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Self-built Annotation :Format and Essence</title>
    <link href="/2023/02/04/Java-Annotation-build-annotations-by-yourself/"/>
    <url>/2023/02/04/Java-Annotation-build-annotations-by-yourself/</url>
    
    <content type="html"><![CDATA[<p>This is the video version of the tutorial:</p><div style="position: relative; width: 100%; padding-bottom: 70%;"><p><iframe src="https://www.youtube.com/embed/kdzch2RvTOg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p></div><h1 id="self-built-java-annotation-format-essence">Self built JavaAnnotation: Format &amp; Essence</h1><p>After learning about annotations built by others, we might wonder ifwe can also built some annotations by our own. After all, the beauty oflearning programming is to build your own world.</p><p>However, we have no idea how to program an annotation ourselves. Sowhat do we do? We simulate. So first let’s see how is the built-inannotation is programed.</p><h1 id="format-of-annotation">Format of annotation</h1><p>We can jump into the source code clicking the<code>@Override</code>while holding <code>⌘command</code>. Here is thesource code for <code>@Override</code></p><h2 id="override"><code>@Override</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> ......</span><br><span class="hljs-comment"> * @jls 9.6.4.4 @Override</span><br><span class="hljs-comment"> * @since 1.5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>Here we found that there are two part of the code. A chunk of codelike this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br></code></pre></td></tr></table></figure><p>And another chunk of code like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="deprecated"><code>@Deprecated</code></h2><p>Now let’s see the source code for <code>@Deprecated</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">.......</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE, PARAMETER, TYPE&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Deprecated &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    ....</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">since</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     ....</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">forRemoval</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br></code></pre></td></tr></table></figure><p><strong>It seems like that the definition of annotations is dividedinto two part: upper part with a bunch of other annotations; and a lowerpart with <code>public @interface ....</code></strong></p><h1 id="to-define-an-annotation">To define an annotation:</h1><p>We are correct, there are two parts. The annotation above<code>public @interface ....</code> is called “Meta annotation”, whichmeans the annotation for annotation. Does that sound familiar? Yeah, wesaw it in the last video in the <ahref="https://en.wikipedia.org/wiki/Java_annotation">Java AnnotationWikipedia Page</a>, which is the thing that we would ignore for“now”.</p><img src="/2023/02/04/Java-Annotation-build-annotations-by-yourself/Wikipedia_JAnnotation_MetaAnno.png" class="" title="Wikipedia page for meta annotation"><h1 id="create-our-own-annotations">Create our own annotations:</h1><p>Now we do not care about the meta annotation, will still delay thatfor now.</p><p>Yet for the following part, we always see something like<code>public @interface ....</code>, that is essentially how we build anannotation. Alright, since we have revealed the mysterious vail on thetop of the annotation, let’s build one ourselves.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RayAnno &#123;&#125;<br></code></pre></td></tr></table></figure><p>Let’s try it out.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RayAnno</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RayAnnoTest</span> &#123;<br><span class="hljs-meta">@RayAnno</span><br>    <span class="hljs-type">int</span> age;<br><br><span class="hljs-meta">@RayAnno</span><br>    String name;<br><br><span class="hljs-meta">@RayAnno</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMethod1</span><span class="hljs-params">()</span> &#123;&#125;<br><br><span class="hljs-meta">@RayAnno</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testMethod2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br><span class="hljs-meta">@RayAnno</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMethod3</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>We found that we could add my own annotation to wherever we want.</p><h1 id="what-is-behind-annotation">What is behind annotation</h1><p>Now we’ve known how the define an annotation, though don’t know whatthat can be used for. But we are human. WE ARE CURIOUS. We want to knowhow this is working, just like we want to know others’ secrets.</p><p>We can do this by decompile. The java file will eventually becompiled to a <ahref="https://en.wikipedia.org/wiki/Bytecode">Byte-code</a> file, and wecan decompile it to see what is really behind the scene.</p><p>So how do we do it?</p><p>We have the code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RayAnno &#123;&#125;<br></code></pre></td></tr></table></figure><p>and a file <code>RayAnno.java</code></p><p>We do the following to compile <code>.java</code> file, we will get a<code>RayAnno.class</code>file, which is the <ahref="https://en.wikipedia.org/wiki/Bytecode">Byte-code</a> fileaforementioned.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">% javac RayAnno.java<br></code></pre></td></tr></table></figure><p>Then we do the following commend to disassemble the<code>RayAnno.class</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">% javac RayAnno.class<br></code></pre></td></tr></table></figure><p>We get</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Compiled from <span class="hljs-string">&quot;RayAnno.java&quot;</span><br>public interface RayAnno extends java.lang.annotation.Annotation &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>which means that a “new” <code>.java</code> file was generated, whichincludes:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RayAnno</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">java</span>.lang.annotation.Annotation &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>How amazing!</p><p>Thus, we found the essence of the annotation. Which is<strong><code>public interface RayAnno extends java.lang.annotation.Annotation &#123;&#125;</code></strong>.</p><h1id="public-interface-rayanno-extends-java.lang.annotation.annotation"><code>public interface RayAnno extends java.lang.annotation.Annotation &#123;&#125;</code></h1><p>This line of code reveals that we are actually creating a newinterface when we create an annotation. Furthermore, this interfaceextends <code>Annotation</code> interface under package<code>java.lang.annotation</code>.</p><h2id="lets-take-a-trip-into-this-intriguing-annotation-interface">Let’stake a trip into this intriguing <code>Annotation</code> interface</h2><p>Here is the <ahref="https://docs.oracle.com/javase/7/docs/api/java/lang/annotation/Annotation.html">APIdocumentation</a>. We found the following:</p><img src="/2023/02/04/Java-Annotation-build-annotations-by-yourself/API_Docu_Annotation.png" class="" title="Java Annotation Description"><p>This just means that this interface is the root interface for allannotations.</p><p>We also see some built in methods, which we will talk about lateron.</p><img src="/2023/02/04/Java-Annotation-build-annotations-by-yourself/API_JavaDoc_Anno_Method.png" class="" title="Java Annotation Methods"><p>Now we have known that an annotation is simply an interface. Thus, itmakes sense to induce that what can be defined in interfaces should beable to be defined in the annotation. And now we are going to talk aboutsome characteristic about annotations.</p><h1 id="annotations-content">Annotation’s content</h1><p>So what do we talk about in the interface? Methods. (Attributes arekinda useless in this case) Let’s take a look about the methods inannotations.</p><p>We can code some abstract method in annotations as:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RayAnno &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>We can add an <code>abstract</code> of course:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RayAnno &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>We call those methods in annotation “attributes” of annotation. Thereare some special features about these attributes, which we will talkabout soon.</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
      <category>Java</category>
      
      <category>Java Language</category>
      
      <category>Annotation Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>Java</tag>
      
      <tag>Java Annotation</tag>
      
      <tag>Programming</tag>
      
      <tag>Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Annotation-built in annotation</title>
    <link href="/2023/02/02/Java-Annotation-built-in-annotation/"/>
    <url>/2023/02/02/Java-Annotation-built-in-annotation/</url>
    
    <content type="html"><![CDATA[<p>Here is the video version:</p><div style="position: relative; width: 100%; padding-bottom: 70%;"><p><iframe src="https://www.youtube.com/embed/DPzwfhlGf-c" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p></div><h1 id="what-are-some-built-in-annotations">What are some built inannotations</h1><p>We can check some definitions from the <ahref="https://en.wikipedia.org/wiki/Java_annotation">Wikipedia pageabout Java annotation</a></p><p>We found that they introduced three built in annotation here</p><img src="/2023/02/02/Java-Annotation-built-in-annotation/wiki_javaAnno.png" class="" title="Wikipidia page about java annotation"><h2id="override-check-if-the-method-is-correctly-overriding-another-one"><code>@Override</code>:check if the method is correctly overriding another one</h2><h2id="deprecated-to-note-that-the-method-is-out-dated-might-have-a-problem-or-too-slow"><code>@Deprecated</code>:to note that the method is out-dated (might have a problem or tooslow)</h2><h2id="suppresswarnings-to-wipe-out-warnings"><code>@SuppressWarnings</code>:to wipe out warnings</h2><p>now let's jump into some code and see how these three annotations areworking in real-world cases</p><h1 id="override"><code>@Override</code></h1><p>As we introduce before in the <ahref="https://slray.com/2023/02/02/What-is-Java-Annotation-intro/">Annotation-intro</a>,<code>@Override</code> annotation is for checking whether a method iscorrectly overriding this class’ super class, or interface.</p><p>Let's go through some example codes:</p><p>We have an <code>Animal</code> class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :An animal class for annotation demo</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;attacking-&gt;&quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>And a <code>cat</code>class that extend <code>Animal</code>class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br><span class="hljs-comment">//If we change the return type, input parameter type or amount</span><br><span class="hljs-comment">//then the program will post an erro</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Miao attack! -&gt;&quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="deprecated"><code>@Deprecated</code></h1><p><code>@Deprecated</code> annotation will mark current method asout-dated.</p><p>Let’s look at an example.</p><p>We have a <code>SumCalculator</code>class in which we are planning todo sum calculation. At first we have the method as such:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SumCalculator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<span class="hljs-keyword">return</span> a+b;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>but later on we found that the <code>sum()</code>method can only taketwo parameters, but we wanna change it so that it could take whatevernumbers people wanna input. Moreover, we also wanna inform people thatthe <code>sum()</code>method is out-dated. Instead, people should use<code>sumNumbers()</code>. We can do such thing:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SumCalculator</span> &#123;<br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<span class="hljs-keyword">return</span> a+b;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumNumbers</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            result += num;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Notice here we can add a <code>@Deprecated</code> on the top of<code>sum()</code> method. Thus when we call it, we will have followingeffect to remind users that they are calling deprecated methods.</p><img src="/2023/02/02/Java-Annotation-built-in-annotation/sum_depre.png" class="" title="Deprecated sum reminding"><h2 id="some-source-code-with-deprecated">Some source code with<code>@Deprecated</code>:</h2><p>Where do we see a lot of deprecated method? When we are codinginvolving <code>Date</code> class.</p><img src="/2023/02/02/Java-Annotation-built-in-annotation/builtin_depre.png" class="" title="Built in built in deprecated methods"><h1 id="suppresswarnings"><code>@SuppressWarnings</code>:</h1><p>This annotation is used to suppress compiler’s warning.</p><p>When we write code like this, we can see on the top right cornerwhere is a yellow triangle with an exclamation mark with number 4. Wecan also see that on the right side, there are 4 bars.</p><img src="/2023/02/02/Java-Annotation-built-in-annotation/warnings.png" class="" title="All the warnings"><p>Each bar represent some warning. Such as “Method ‘test()’ is neverused”.</p><img src="/2023/02/02/Java-Annotation-built-in-annotation/warning_big.png" class="" title="detailed warnings"><p>But we can suppress the warning by doing this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WarningDemo</span> &#123;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Notice we added <code>@SuppressWarnings("all")</code> on the top ofthe method whose warning you want to suppress.</p><p>After doing this, you will find that the yellow bar disappeared.</p><ul><li>Parameters in annotation:</li></ul><p>You might have noticed that there was an “all” parameter inside ofthe annotation. This means we want to suppress all the warning. We willlook as this later.</p><p>Normally, we would add <code>@SuppressWarnings("all")</code> on thetop of the class, so that we can suppress all the warnings.</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
      <category>Java</category>
      
      <category>Java Language</category>
      
      <category>Annotation Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>Java</tag>
      
      <tag>Java Annotation</tag>
      
      <tag>Programming</tag>
      
      <tag>Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>What is Java Annotation?-intro</title>
    <link href="/2023/02/02/What-is-Java-Annotation-intro/"/>
    <url>/2023/02/02/What-is-Java-Annotation-intro/</url>
    
    <content type="html"><![CDATA[<h1 id="annotation-intro">Annotation-intro</h1><p>This is the video version:</p><div style="position: relative; width: 100%; padding-bottom: 70%;"><p><iframe src="https://www.youtube.com/embed/XEE_BeI-U_I" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p></div><h1 id="introduction">Introduction</h1><h2 id="where-have-we-seen-annotation">Where have we seenannotation</h2><ul><li>When learning inheritance: <code>@Override</code><ul><li>extend a super class</li><li>implements an interface</li></ul></li><li>When we use Unit test: <code>@Test</code><ul><li>To run something “without” a main method</li></ul></li><li><dl><dt>When learning Java Spring (totally fine if you haven’t touchedanything about spring)</dt><dd><p><code>@Configuration</code>, <code>@Component</code>,<code>@Repository</code>, <code>@Autowire</code>...</p></dd></dl><ul><li>We can use annotation to create beans</li><li>We can use annotation to set restriction for parameters</li></ul></li></ul><h1 id="what-is-annotation">What is annotation</h1><h2 id="in-short-it-is-a-kind-of-not-part-of-the-program">In short, itis a kind of “not part of the program”</h2><p>Where have we see something that feels like not part of the program?Yes, comments! Annotation is just like comments. But instead of forhuman, annotation is more like a comment for program, specifically forjava compiler.</p><h2 id="why-do-we-wanna-learn-annotation">Why do we wanna learnannotation?</h2><p>Admittedly, you can write Java programs and use annotation withoutlearning the underlaying principle. However, if you are not satisfiedwith just using the frameworks developed by others, if you wanna doframeworks by yourself, or if you want to have a deeper understanding ofwhat is inside of Java language design, then it is indispensable tolearn annotation and finish this series.</p><p>Annotation is counted as an advanced knowledge of Java programming.You are stepping out of beginners and intermediate, if you are watchingthis video!</p><h2 id="say-in-the-end">Say in the end</h2><ul><li>We will jump into the source code of annotation and have a touch onwhat exactly annotation is. (spoil alert! it is simply aninterface)</li><li>I will introduce several frequently used built-in annotation</li></ul><h1 id="definitions">Definitions:</h1><h2 id="to-describe-programs-but-for-programs">--To describe programs,but for programs</h2><h2 id="format-xxx">--Format: <code>@XXX</code></h2><h1 id="functions">Functions:</h1><h2 id="to-format-java-documentation-api-doc">1. To format javadocumentation (API doc)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name of the person you wanna greet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sentence of the greeting</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> full greeting sentence</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">greet</span><span class="hljs-params">(String name, String sentence)</span> &#123;<br>        <span class="hljs-keyword">return</span> sentence + <span class="hljs-string">&quot;, &quot;</span> + name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>A java document is something you see when you search up thing like"how to slipt String in Java". Here are some examples.<ul><li><ahref="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html">ClassString</a></li><li><ahref="https://docs.oracle.com/javase/7/docs/api/java/util/Collections.html">ClassCollections</a></li></ul></li></ul><p>Then, type <code>javadoc</code> in the command line, and you willfound the files pop out.</p><p>Click the <code>index.html</code>, you will find the java doc.</p><h2 id="analyze-the-code">2. Analyze the code</h2><h2 id="compiling-check">3. Compiling check</h2>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
      <category>Java</category>
      
      <category>Java Language</category>
      
      <category>Annotation Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>Java</tag>
      
      <tag>Java Annotation</tag>
      
      <tag>Programming</tag>
      
      <tag>Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/11/hello-world/"/>
    <url>/2023/01/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://slray.com">Ray's website</a>! This is myvery first post!</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>How does this website come into place?</title>
    <link href="/2023/01/10/How-does-this-website-come-into-place/"/>
    <url>/2023/01/10/How-does-this-website-come-into-place/</url>
    
    <content type="html"><![CDATA[<p>I wrote this blog for those of you who might be interested inbuilding a website, not necessaryly a personal blog. You could simplyshow your projects, resume, or just have a world of your own. I buildthis blog out of nothing but a thought, thus do not let coding or CSskills become an obstacle on your way.</p><p>There will be a table of content on the right side, feel free to jumpto the prefered part.</p><h1 id="why-would-i-care-about-how-you-build-this-website">Why would Icare about how you build this website?</h1><p>A short answer would be very similar to the introduction. Yet otherthan that, you can truly learn a lot from exploring the world of web. Itried AWS, Google Could, Microsoft cloud, and even a local server--aRasperry Pi; I bought a domain name, trying to connect it to my cloudserver, which spent tens of my life and hair. During the process, I gota touch on what dynamic/static web page is, what DNS is, what IP addressis, to name a few. It is a journey worth to try.</p><h1 id="so-how-did-you-build-this-website">So how did you build thiswebsite?</h1><p>A short answer: <a href="https://pages.github.com/">GitHub Pages</a>+ <a href="https://hexo.io/">Hexo</a> + a domain name(<ahref="https://slray.com/">slray.com</a>).</p><h2 id="why-github-pages">Why GitHub Pages</h2><p>I am an international student from China, and I would love to show mywebsite to both my friends from China and the rest of the world.Fortunately, <a href="https://github.com/">GitHub</a> is no longerblocked in China. Thus, I used <ahref="https://pages.github.com/">GitHub Pages</a> as my web server.</p><h3 id="a-problem-with-github-pages">A problem with GitHub Pages</h3><p>You can only deploy static web pages. This does not mean that youcannot have animations or special effects for the website. A static webpages is more like a solely online web page, meaning that you can not(orit is very hard to) collect data from the websites as well as show data.In other words, you can have a blog showing your words, your pictures,or your videos. Yet you cannot deploy a web application.</p><p>However, that would not be a huge problem, and a static page isalready enough for now.</p><h2 id="what-is-hexo">What is Hexo</h2><p>This is a website providing well-designed web-pages for those who arebad at designing. I used this website for a better appearance of thedesign of the website.</p><p>Remember when doing a slide for presentation, groupmates would goonline for templates. <a href="https://hexo.io/">Hexo</a> is a similarwebsite for template, but for webpages instead of a slide. (Come on, awebsite is much coooler than a slide!)</p><hr /><p>I have spent so much time on this website. This would be my firstofficial post with content. It would not be an easy job to build awebsite, espcially when you are fighting alone and searching up thequestions that only have two pages of result. I know there would stillbe a lot of confusions: what is a web server? what is git? what is adomain? what is web? what is those <code>http</code> stuff. Is itexpensive to build a website? I will probably post more details abouthow I build this website. I basically tried out most of the ways andtouched on most of erros. I would love to try my best to save some timeand provide some consolation for those who are encoutering the sameproblems and feeling that no one could help.</p><p>See you next time!</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
      <category>Web</category>
      
      <category>Personal Website</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>server</tag>
      
      <tag>GitHub</tag>
      
      <tag>AWS</tag>
      
      <tag>Google Could</tag>
      
      <tag>Personal Blog</tag>
      
      <tag>Building website</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
