<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>About Daily Learning Summary, Intern</title>
    <link href="/2023/06/14/intern-log/"/>
    <url>/2023/06/14/intern-log/</url>
    
    <content type="html"><![CDATA[<p>This blog is a record for what I learned during my internship at300K—a quant company.</p><h1 id="python">Python</h1><h2 id="pass"><code>pass</code></h2><p>In Python, the <code>pass</code> keyword is a<strong>placeholder</strong> statement. It is used when a statement isrequired syntactically, but no action needs to be performed.</p><h3 id="example.">Example.</h3><p>Suppose you're designing a new class and you know it needs aparticular method, but you aren't sure what the implementation of thatmethod should be yet. You can use <code>pass</code> as a placeholderlike so:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">MyClass:</span><br><span class="hljs-symbol">    <span class="hljs-symbol">def</span></span> <span class="hljs-symbol">future_method</span>(<span class="hljs-symbol">self</span>):<br>        <span class="hljs-symbol">pass</span><br></code></pre></td></tr></table></figure><p>In this code, <code>future_method</code> does nothing, but it's avalid method. Without the <code>pass</code> statement, the code wouldhave a syntax error because Python expects a block of code to follow themethod definition. The <code>pass</code> keyword is saying, "Iacknowledge that you expect something here, but I don't want to doanything."</p><p>Similarly, it can be used in conditional statements, loops, etc.where some code is expected:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span> some_condition:<br>    pass  # TODO: handle <span class="hljs-keyword">this</span> condition<br><br></code></pre></td></tr></table></figure><p>In the above case, <code>pass</code> is used to indicate that thiscondition should be handled in the future.</p><p>Keep in mind, it's typically used in development phases, and in mostcases, you should eventually replace <code>pass</code> with somemeaningful code.</p><h2 id="dataclass"><code>@dataclass</code></h2><p>The <code>@dataclass</code> decorator is a feature of Pythonintroduced in Python 3.7, as part of the <code>dataclasses</code>module. It provides a convenient way to generate special methods forclasses which mainly contain data, like the <strong>init</strong>,<strong>repr</strong>, and <strong>eq</strong> methods.</p><h3 id="example">Example:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@dataclass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DogInfo</span>():<br>    name: <span class="hljs-built_in">str</span><br>    age: <span class="hljs-built_in">int</span><br><br></code></pre></td></tr></table></figure><p><code>DogInfo</code> is defined as a dataclass, which means Pythonwill automatically add special methods like <strong>init</strong>,<strong>repr</strong>, and <strong>eq</strong>.</p><h3 id="compare-to-java">Compare to Java</h3><p>Java does not have a direct equivalent to Python's dataclasses, butit does have similar features for creating simple classes that mainlycontain data.</p><p>One approach in Java is to create a simple class with private fields,and generate getter, setter, <code>equals()</code>,<code>hashCode()</code>, and <code>toString()</code> methods. Mostmodern Java IDEs can generate these methods for you.</p><p>Starting from Java 14, there's also a preview feature called<code>record</code> which provides similar functionality to Python'sdataclasses. Here's an example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">DogInfo</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>In this Java code, <code>DogInfo</code> is defined as a record withtwo fields: <code>name</code> and <code>age</code>. Java automaticallygenerates constructor, equals, hashCode, and toString methods.</p><h3id="dataclassfrozentrue-the-frozentrue"><code>@dataclass(frozen=True)</code>the <code>(frozen=True)</code></h3><p>The <code>@dataclass</code> decorator in Python comes with severalparameters that you can use to customize the behavior of the dataclass,and one of these parameters is <code>frozen</code>.</p><p>If you set <code>frozen=True</code> when you define a dataclass, itmakes the instances of that dataclass immutable, similar to a tuple.That is, once the instance has been created and its attributes have beenset, you can't change them.</p><p>If you try to change an attribute of a frozen dataclass, Pythonraises an exception. Here's an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> dataclass<br><br><span class="hljs-meta">@dataclass(<span class="hljs-params">frozen=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>    x: <span class="hljs-built_in">float</span><br>    y: <span class="hljs-built_in">float</span><br><br>p = Point(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>p.x = <span class="hljs-number">5</span>  <span class="hljs-comment"># Raises a `dataclasses.FrozenInstanceError`</span><br><br></code></pre></td></tr></table></figure><p>If you run this code, you'll get a <code>FrozenInstanceError</code>when you try to assign <code>5</code> to <code>p.x</code>.</p><p>The <code>frozen=True</code> parameter is useful when you want tocreate a dataclass that is hashable and can be used as a dictionary key,or when you want to ensure that an instance of the class won't changeonce it's been created.</p><h4 id="compare-to-javas-final-keyword">Compare to Java’s<code>final</code> keyword</h4><p>Compare with <code>final float PI</code> in Java: the<code>frozen=True</code> parameter for Python's <code>@dataclass</code>and the <code>final</code> keyword in Java serve similar purposes, butthey're not exactly the same.</p><p>The <code>frozen=True</code> parameter in Python makes it so that allattributes of an instance of a dataclass are immutable -- you can'tchange them once they're set. This is similar to how a<code>final</code> variable in Java can't be changed once it'sinitialized.</p><p>However, the <code>final</code> keyword in Java can be used inseveral contexts. When used with a variable (like<code>final float PI</code>), it makes that variable a constant -- youcan't change its value once it's initialized. When used with a class, itmeans the class can't be subclassed. When used with a method, it meansthe method can't be overridden by subclasses.</p><p>The <code>frozen=True</code> parameter in Python's<code>@dataclass</code> only affects the mutability of instances of theclass. It doesn't prevent the class from being subclassed, nor does itprevent methods from being overridden. There's no exact equivalent inPython for Java's <code>final</code> keyword when used with classes andmethods. Python's philosophy tends towards allowing greater flexibility,so "final" classes and methods are not a language feature.</p><h3 id="post_init"><code>post_init</code></h3><p>The <code>__post_init__</code> method in Python is a special methodprovided by the dataclasses module. It's a method that you can define inyour dataclass, and if it exists, it gets called automatically at theend of the generated <code>__init__</code> method.</p><p>The purpose of the <code>__post_init__</code> method is to performany additional initialization steps that you need to do beyond justsetting the attributes of your dataclass to the provided values.</p><p>Here's an example of how you might use it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> dataclass<br><br><span class="hljs-meta">@dataclass</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>:<br>    x: <span class="hljs-built_in">float</span><br>    y: <span class="hljs-built_in">float</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__post_init__</span>(<span class="hljs-params">self</span>):<br>        self.magnitude = (self.x ** <span class="hljs-number">2</span> + self.y ** <span class="hljs-number">2</span>) ** <span class="hljs-number">0.5</span><br><br>p = Point(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(p.magnitude)  <span class="hljs-comment"># Outputs: 5.0</span><br><br></code></pre></td></tr></table></figure><p>In this example, after the <code>x</code> and <code>y</code>attributes are set in the <code>__init__</code> method, the<code>__post_init__</code> method is automatically called. Thiscalculates the magnitude of the point from its <code>x</code> and<code>y</code> coordinates and stores it in the <code>magnitude</code>attribute.</p><p>If you don't define a <code>__post_init__</code> method in yourdataclass, then nothing extra happens after <code>__init__</code>. Butif you do define it, then it provides a way to add some additionalinitialization behavior that goes beyond just setting attributevalues.</p><h2 id="inherit-in-python-and-java">Inherit in Python and Java</h2><p>Inheritance is a key feature in many object-oriented programminglanguages, including Python and Java. It is a mechanism that allows aclass to acquire the properties and behaviors of another class.</p><p>The class from which properties are inherited is known as the parentclass, superclass, or base class. The class that inherits thoseproperties is known as the child class, subclass, or derived class.</p><p>When a class inherits from another class in Python, it gains accessto all of the superclass's attributes and methods. This means thatobjects of the subclass can be treated as instances of the superclass,and code that works with the superclass will automatically work with thesubclass.</p><p>Python's inheritance is defined as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ParentClass</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildClass</span>(<span class="hljs-title class_ inherited__">ParentClass</span>):<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>In this example, <code>ChildClass</code> is inheriting from<code>ParentClass</code>.</p><p>Python supports both single and multiple inheritance. Singleinheritance is when a class inherits from a single superclass, whilemultiple inheritance is when a class inherits from more than onesuperclass. Here is an example of multiple inheritance:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ParentClass1</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ParentClass2</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildClass</span>(ParentClass1, ParentClass2):<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>In this example, <code>ChildClass</code> is inheriting from both<code>ParentClass1</code> and <code>ParentClass2</code>.</p><p>Java also supports inheritance, but with a key difference: Java doesnot support multiple inheritance for classes. A class in Java can onlydirectly inherit from one superclass. However, a class can implementmultiple interfaces, which is a sort of workaround for multipleinheritance.</p><p>This is how you define inheritance in Java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParentClass</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChildClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ParentClass</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>In this example, <code>ChildClass</code> is inheriting from<code>ParentClass</code>.</p><p>Despite the difference in multiple inheritance, the fundamental ideabehind inheritance is the same in both languages. It's a way to organizecode, increase reusability, and set up relationships between differenttypes.</p><p>Also, Java have abstract class which might be different with whatpython’s inherit behaves.</p><h4 id="a-key-example">A key example:</h4><p>Yes, you're correct. When you create an instance of<code>AClass</code> by calling <code>AClass("t1", "t2", "t3")</code>,the <code>p1</code>, <code>p2</code>, and <code>p3</code> attributes of<code>a_class</code> will be set to "t1", "t2", and "t3"respectively.</p><p>The values "p1_attribute", "p2_attribute", and "p3_attribute"specified in the class definition are default values. They are used ifyou create an instance without providing corresponding arguments.</p><p>Here's how it works:</p><p>Try to answer the following question:</p><p>If I have code</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">@dataclass(frozen=True)<br><span class="hljs-keyword">class</span> <span class="hljs-symbol">AClass:</span><br><span class="hljs-symbol">    <span class="hljs-symbol">p1</span>: <span class="hljs-symbol">str</span></span> = &quot;<span class="hljs-symbol">p1_attribute</span>&quot;<br>    <span class="hljs-symbol">p2: <span class="hljs-symbol">str</span></span> = &quot;<span class="hljs-symbol">p2_attribute</span>&quot;<br>    <span class="hljs-symbol">p3: <span class="hljs-symbol">str</span></span> = &quot;<span class="hljs-symbol">p3_attribute</span>&quot;<br></code></pre></td></tr></table></figure><p>and I have <code>a_class = AClass("t1", "t2", "t3")</code>, then the<code>p1, p2, p3</code> of <code>a_class</code> will be "t1", "t2", and"t3"?</p><ul><li><p>answer Yes, it’s correct. When you create an instance of<code>AClass</code> by calling <code>AClass("t1", "t2", "t3")</code>,the <code>p1</code>, <code>p2</code>, and <code>p3</code> attributes of<code>a_class</code> will be set to "t1", "t2", and "t3" respectively.The values "p1_attribute", "p2_attribute", and "p3_attribute" specifiedin the class definition are default values. They are used if you createan instance without providing corresponding arguments. Here's how itworks:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> dataclass<br><br><span class="hljs-meta">@dataclass(<span class="hljs-params">frozen=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AClass</span>:<br>    p1: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;p1_attribute&quot;</span><br>    p2: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;p2_attribute&quot;</span><br>    p3: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;p3_attribute&quot;</span><br><br><span class="hljs-comment"># Creating an instance with arguments</span><br>a_class = AClass(<span class="hljs-string">&quot;t1&quot;</span>, <span class="hljs-string">&quot;t2&quot;</span>, <span class="hljs-string">&quot;t3&quot;</span>)<br><span class="hljs-built_in">print</span>(a_class.p1)  <span class="hljs-comment"># Outputs: t1</span><br><span class="hljs-built_in">print</span>(a_class.p2)  <span class="hljs-comment"># Outputs: t2</span><br><span class="hljs-built_in">print</span>(a_class.p3)  <span class="hljs-comment"># Outputs: t3</span><br><br><span class="hljs-comment"># Creating an instance without arguments</span><br>another_class = AClass()<br><span class="hljs-built_in">print</span>(another_class.p1)  <span class="hljs-comment"># Outputs: p1_attribute</span><br><span class="hljs-built_in">print</span>(another_class.p2)  <span class="hljs-comment"># Outputs: p2_attribute</span><br><span class="hljs-built_in">print</span>(another_class.p3)  <span class="hljs-comment"># Outputs: p3_attribute</span><br><br></code></pre></td></tr></table></figure><p>In this code, when we create <code>a_class</code> with arguments,those arguments override the default values. But when we create<code>another_class</code> without arguments, the attributes get set tothe default values.</p></li></ul><h2 id="yield"><code>yield</code></h2><p>I search several times on the <code>yiedl</code> key word in python.Even with ChatGPT, I cannot clearly understand how <code>yield</code>keyword is working in python and why we need it. One key step tounderstand it is that the <strong><code>yield</code></strong> keywordcannot be replaced with <strong><code>return</code></strong> because<strong><code>return</code></strong> in a function terminates thefunction entirely, while <strong><code>yield</code></strong> only pausesthe function. If you replace <strong><code>yield</code></strong> with<strong><code>return</code></strong>, your function will stop executingafter the first <strong><code>return</code></strong> statement itencounters, and it will not be able to produce multiple values overtime.</p><hr /><p>The <code>yield</code> keyword in Python is used in a special kind offunction called a generator. Generators are a type of iterable, likelists or tuples. Unlike lists, they don't allow indexing with arbitraryindices, but they can still be iterated through with for loops.</p><p>When the <code>yield</code> keyword is called in a function, itreturns a value and pauses execution of the function. The function canthen be resumed right where it left off, allowing it to generate asequence of results over time, instead of computing them all at once andreturning them in a list for instance.</p><p>Here's a simple example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">simple_generator</span>():<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span><br><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> simple_generator():<br>    <span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure><p>This will output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>If you only need to generate a single value from your function, thenyou can use <code>return</code> instead of <code>yield</code>. Also, ifyour function generates a small number of values, you might be able touse <code>return</code> to return them all at once in a list, ratherthan generating them one at a time with <code>yield</code>.</p><p>In summary, <code>yield</code> is a special keyword used in thecontext of Python generators, and it cannot be simply replaced with<code>return</code> without changing the function's behavior.</p><h3 id="can-i-use-a-block-of-code-to-implement-yield">Can I use a blockof code to implement <code>yield</code>?</h3><p>In Python, the <code>yield</code> keyword is used to make a functioninto a generator that can produce a sequence of results over time.However, the <code>yield</code> keyword itself does quite a bit ofbehind-the-scenes work, so it's not straightforward to replace it with afew lines of code. You would need to implement a whole class with aniterator to get equivalent behavior.</p><p>Here is a simple example of how you might do that. This exampleimplements a generator that yields the numbers 1, 2, and 3, similar tothe previous example.</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleGenerator</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        <span class="hljs-variable language_">self</span>.current = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__next__</span>(<span class="hljs-params"><span class="hljs-variable language_">self</span></span>):<br>        <span class="hljs-variable language_">self</span>.current += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.current &gt; <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">raise</span> <span class="hljs-title class_">StopIteration</span><br>        <span class="hljs-symbol">else:</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.current<br><br><span class="hljs-comment"># Use the generator</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-title class_">SimpleGenerator</span>():<br>    print(value)<br><br></code></pre></td></tr></table></figure><p>In this code, the <code>SimpleGenerator</code> class has a<code>__next__</code> method that implements the logic of the generator:it keeps track of the current number, and each time<code>__next__</code> is called, it increments the number and returnsit. When the number gets bigger than 3, it raises a<code>StopIteration</code> exception, which signals that the generatoris done.</p><p>This is a more explicit way of implementing a generator, and it cangive you a clearer sense of what's going on behind the scenes when youuse the <code>yield</code> keyword. However, using <code>yield</code> isgenerally simpler and more concise, which is why it's usually preferredfor creating generators in Python.</p><h3id="but-with-yield-keyword-there-wont-be-such-thing-to-store-the-iterable-result-which-means-i-wont-be-able-to-print-the-whole-return-result-inside-of-the-method-with-yield">butwith <code>yield</code> keyword, there won't be such thing to store theiterable result, which means I won't be able to print the whole returnresult inside of the method with 'yield`?</h3><ul><li><p>answer You're correct. A generator (a function that uses the<code>yield</code> keyword) doesn't return a value that can be stored ina variable like a list or tuple. Instead, it produces values one at atime on-the-fly as you iterate over the generator. Here's anexample:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">def</span> <span class="hljs-title function_">simple_generator</span>():<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span><br><br><span class="hljs-comment"># This won&#x27;t work as you might expect:</span><br>result = simple_generator()<br>print(result)  <span class="hljs-comment"># Outputs: &lt;generator object simple_generator at 0x7f...&gt;</span><br><br></code></pre></td></tr></table></figure><p>When you try to print <code>result</code>, it tells you that it's agenerator object, not a list of numbers. If you want to collect all thevalues produced by a generator into a list, you can do that by passingthe generator to the <code>list</code> function:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-literal">result</span> = <span class="hljs-built_in">list</span>(simple_generator())<br>print(<span class="hljs-literal">result</span>)  <span class="hljs-comment"># Outputs: [1, 2, 3]</span><br><br></code></pre></td></tr></table></figure><p>However, it's important to remember that one of the main reasons touse generators is when you're working with a large amount of data thatwon't fit into memory all at once. In such cases, you'd generally wantto process the generator's values one at a time, rather than trying tostore them all in a list.</p></li></ul><h2 id="enumerate"><code>enumerate()</code></h2><p>The <code>enumerate</code> function in Python is a built-in functionthat allows you to loop over something and have an automaticcounter.</p><p>In a <code>for</code> loop, when you use<code>enumerate(sources)</code>, it returns an enumerate object, whichis an iterable that yields pairs of the form<code>(index, value)</code>. In each iteration of the loop,<code>idx</code> is the index of the current item, and<code>source</code> is the value of the current item.</p><p>Here's a simple example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;cherry&#x27;</span>]<br><br><span class="hljs-keyword">for</span> idx, fruit <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(fruits):<br>    <span class="hljs-built_in">print</span>(idx, fruit)<br></code></pre></td></tr></table></figure><p>This will output:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">0</span> apple<br><span class="hljs-number">1</span> banana<br><span class="hljs-number">2</span> cherry<br></code></pre></td></tr></table></figure><p>As you can see, <code>idx</code> is the index of each item in thelist, and <code>fruit</code> is the value of each item. This can be veryuseful in situations where you need to know the index of the items asyou're looping over them.</p><h2 id="iter"><code>iter()</code></h2><p>The <code>iter()</code> function in Python is a built-in functionthat returns an iterator object. An iterator is an object that can beiterated (looped) upon. An object which will return data, one element ata time when <code>next()</code> is called on it.</p><p>In more technical terms, an iterator is an object that implements theiterator protocol, which consists of the methods <code>__iter__()</code>and <code>__next__()</code>.</p><p>Here's an example:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>my_iter = <span class="hljs-built_in">iter</span>(my_list)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(my_iter))  <span class="hljs-comment"># Outputs: 1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(my_iter))  <span class="hljs-comment"># Outputs: 2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(my_iter))  <span class="hljs-comment"># Outputs: 3</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(my_iter))  <span class="hljs-comment"># Outputs: 4</span><br><br></code></pre></td></tr></table></figure><p>In this code, <code>iter(my_list)</code> returns an iterator objectthat you can fetch values from one at a time using the<code>next()</code> function. Once all elements are exhausted,<code>next()</code> will raise a <code>StopIteration</code>exception.</p><p>Most of the time, you don't need to use <code>iter()</code> and<code>next()</code> directly, because Python's <code>for</code> loopautomatically calls them when you loop over an iterable object:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">element</span> <span class="hljs-keyword">in</span> my_list:<br>    print(<span class="hljs-keyword">element</span>)<br><br></code></pre></td></tr></table></figure><p>This code does the same thing as the previous example, but it's a lotsimpler and clearer. The <code>for</code> loop automatically calls<code>iter(my_list)</code> to get an iterator, and then it calls<code>next()</code> on that iterator for each iteration of the loop.When <code>next()</code> raises a <code>StopIteration</code> exception,the <code>for</code> loop catches it and gracefully exits the loop.</p><h2 id="ternary-operator-in-python">ternary operator in Python</h2><h3 id="example-1">Example:</h3><p>rewrite the following Java code in Python</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (j &gt; <span class="hljs-number">1</span>) ? <span class="hljs-number">6</span> : <span class="hljs-number">7</span>; <span class="hljs-comment">// if j &gt; 1, then i = 6, else, i = 7</span><br></code></pre></td></tr></table></figure><p>Python does have a similar construct, but the syntax is differentfrom Java. Instead of <code>(j &gt; 1) ? 6 : 7</code>, in Python youwould write <code>6 if j &gt; 1 else 7</code>.</p><p>Here's an example:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span> if j &gt; <span class="hljs-number">1</span> else <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p>In this Python code, <code>6 if j &gt; 1 else 7</code> is aconditional expression (often called a ternary operation). It checks if<code>j &gt; 1</code>. If <code>j &gt; 1</code> is true, it evaluates to<code>6</code>. Otherwise, it evaluates to <code>7</code>. This value isthen assigned to <code>i</code>.</p><p>This is similar to the <code>? :</code> operator in Java, but thesyntax is slightly different.</p><h1 id="git">Git</h1><h2id="differences-between-git-switch-another-branch-and-git-checkout-another-branch">Differencesbetween <code>git switch another-branch</code> and<code>git checkout another-branch</code></h2><p>In versions of Git prior to 2.23, the command<code>git checkout</code> was primarily used to switch between branchesin a Git repository. However, starting from Git 2.23, the command<code>git switch</code> was introduced as a more intuitive and saferalternative to <code>git checkout</code> when it comes to switchingbranches. Here are the main differences between the two commands:</p><ol type="1"><li>Simplicity and clarity: The <code>git switch</code> command wasintroduced to provide a clearer and more straightforward syntax forswitching branches. The name "switch" better reflects the action beingperformed, making it easier to understand its purpose at a glance.</li><li>Safety: The <code>git switch</code> command is designed to be morecautious and less error-prone than <code>git checkout</code>. When using<code>git switch</code>, Git performs additional checks to ensure thatyou don't accidentally lose work or overwrite uncommitted changes. Forexample, if you have uncommitted changes in your working directory, Gitwill refuse to switch branches unless you either commit the changes orstash them. This helps prevent data loss.</li><li>Branch creation: With <code>git switch</code>, you can create andswitch to a new branch in a single command using the<code>git switch -c &lt;new-branch&gt;</code> syntax. This combines thecreation of a branch and switching to it into a single step. Incontrast, <code>git checkout</code> requires separate commands to createand switch to a new branch (<code>git branch &lt;new-branch&gt;</code>and <code>git checkout &lt;new-branch&gt;</code>).</li><li>Replacing detached HEAD: In <code>git switch</code>, the command<code>git switch &lt;commit&gt;</code> is used to switch to a specificcommit, effectively replacing the old "detached HEAD" state. This syntaxmakes it more explicit and less error-prone to switch to a specificcommit, as opposed to <code>git checkout &lt;commit&gt;</code>.</li></ol><p>It's worth noting that <code>git checkout</code> is still supportedin recent versions of Git to maintain backward compatibility, but<code>git switch</code> is encouraged for branch switching operationsdue to its advantages in safety and simplicity.</p><h2id="git-command-for-create-and-checkout-to-a-new-branch-together">Gitcommand for create and checkout to a new branch together</h2><p>You may use <code>git checkout -b another-branch</code></p><h1 id="terminal-command">Terminal Command</h1><h2 id="split-the-command-window-to-multiple-sub-windows">Split thecommand window to multiple sub windows</h2><p>You may use <code>command</code> + <code>D</code> on key board</p>]]></content>
    
    
    <categories>
      
      <category>Daily Logs</category>
      
      <category>Intern Log</category>
      
      <category>Tech Summary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tech</tag>
      
      <tag>Intern</tag>
      
      <tag>Intern Log</tag>
      
      <tag>Python</tag>
      
      <tag>Python Grammar</tag>
      
      <tag>Git</tag>
      
      <tag>Git Command</tag>
      
      <tag>Terminal</tag>
      
      <tag>Terminal Command</tag>
      
      <tag>Intern At 300K</tag>
      
      <tag>Learning Log</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Self-built Annotation :Format and Essence</title>
    <link href="/2023/02/04/Java-Annotation-build-annotations-by-yourself/"/>
    <url>/2023/02/04/Java-Annotation-build-annotations-by-yourself/</url>
    
    <content type="html"><![CDATA[<p>This is the video version of the tutorial:</p><div style="position: relative; width: 100%; padding-bottom: 70%;"><p><iframe src="https://www.youtube.com/embed/kdzch2RvTOg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p></div><h1 id="self-built-java-annotation-format-essence">Self built JavaAnnotation: Format &amp; Essence</h1><p>After learning about annotations built by others, we might wonder ifwe can also built some annotations by our own. After all, the beauty oflearning programming is to build your own world.</p><p>However, we have no idea how to program an annotation ourselves. Sowhat do we do? We simulate. So first let’s see how is the built-inannotation is programed.</p><h1 id="format-of-annotation">Format of annotation</h1><p>We can jump into the source code clicking the<code>@Override</code>while holding <code>⌘command</code>. Here is thesource code for <code>@Override</code></p><h2 id="override"><code>@Override</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> ......</span><br><span class="hljs-comment"> * @jls 9.6.4.4 @Override</span><br><span class="hljs-comment"> * @since 1.5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>Here we found that there are two part of the code. A chunk of codelike this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br></code></pre></td></tr></table></figure><p>And another chunk of code like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="deprecated"><code>@Deprecated</code></h2><p>Now let’s see the source code for <code>@Deprecated</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">.......</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE, PARAMETER, TYPE&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Deprecated &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    ....</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">since</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     ....</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">forRemoval</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br><br></code></pre></td></tr></table></figure><p><strong>It seems like that the definition of annotations is dividedinto two part: upper part with a bunch of other annotations; and a lowerpart with <code>public @interface ....</code></strong></p><h1 id="to-define-an-annotation">To define an annotation:</h1><p>We are correct, there are two parts. The annotation above<code>public @interface ....</code> is called “Meta annotation”, whichmeans the annotation for annotation. Does that sound familiar? Yeah, wesaw it in the last video in the <ahref="https://en.wikipedia.org/wiki/Java_annotation">Java AnnotationWikipedia Page</a>, which is the thing that we would ignore for“now”.</p><img src="/2023/02/04/Java-Annotation-build-annotations-by-yourself/Wikipedia_JAnnotation_MetaAnno.png" class="" title="Wikipedia page for meta annotation"><h1 id="create-our-own-annotations">Create our own annotations:</h1><p>Now we do not care about the meta annotation, will still delay thatfor now.</p><p>Yet for the following part, we always see something like<code>public @interface ....</code>, that is essentially how we build anannotation. Alright, since we have revealed the mysterious vail on thetop of the annotation, let’s build one ourselves.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RayAnno &#123;&#125;<br></code></pre></td></tr></table></figure><p>Let’s try it out.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RayAnno</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RayAnnoTest</span> &#123;<br><span class="hljs-meta">@RayAnno</span><br>    <span class="hljs-type">int</span> age;<br><br><span class="hljs-meta">@RayAnno</span><br>    String name;<br><br><span class="hljs-meta">@RayAnno</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMethod1</span><span class="hljs-params">()</span> &#123;&#125;<br><br><span class="hljs-meta">@RayAnno</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testMethod2</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br><span class="hljs-meta">@RayAnno</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMethod3</span><span class="hljs-params">()</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>We found that we could add my own annotation to wherever we want.</p><h1 id="what-is-behind-annotation">What is behind annotation</h1><p>Now we’ve known how the define an annotation, though don’t know whatthat can be used for. But we are human. WE ARE CURIOUS. We want to knowhow this is working, just like we want to know others’ secrets.</p><p>We can do this by decompile. The java file will eventually becompiled to a <ahref="https://en.wikipedia.org/wiki/Bytecode">Byte-code</a> file, and wecan decompile it to see what is really behind the scene.</p><p>So how do we do it?</p><p>We have the code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RayAnno &#123;&#125;<br></code></pre></td></tr></table></figure><p>and a file <code>RayAnno.java</code></p><p>We do the following to compile <code>.java</code> file, we will get a<code>RayAnno.class</code>file, which is the <ahref="https://en.wikipedia.org/wiki/Bytecode">Byte-code</a> fileaforementioned.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">% javac RayAnno.java<br></code></pre></td></tr></table></figure><p>Then we do the following commend to disassemble the<code>RayAnno.class</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">% javac RayAnno.class<br></code></pre></td></tr></table></figure><p>We get</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Compiled from <span class="hljs-string">&quot;RayAnno.java&quot;</span><br>public interface RayAnno extends java.lang.annotation.Annotation &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>which means that a “new” <code>.java</code> file was generated, whichincludes:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">RayAnno</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">java</span>.lang.annotation.Annotation &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>How amazing!</p><p>Thus, we found the essence of the annotation. Which is<strong><code>public interface RayAnno extends java.lang.annotation.Annotation &#123;&#125;</code></strong>.</p><h1id="public-interface-rayanno-extends-java.lang.annotation.annotation"><code>public interface RayAnno extends java.lang.annotation.Annotation &#123;&#125;</code></h1><p>This line of code reveals that we are actually creating a newinterface when we create an annotation. Furthermore, this interfaceextends <code>Annotation</code> interface under package<code>java.lang.annotation</code>.</p><h2id="lets-take-a-trip-into-this-intriguing-annotation-interface">Let’stake a trip into this intriguing <code>Annotation</code> interface</h2><p>Here is the <ahref="https://docs.oracle.com/javase/7/docs/api/java/lang/annotation/Annotation.html">APIdocumentation</a>. We found the following:</p><img src="/2023/02/04/Java-Annotation-build-annotations-by-yourself/API_Docu_Annotation.png" class="" title="Java Annotation Description"><p>This just means that this interface is the root interface for allannotations.</p><p>We also see some built in methods, which we will talk about lateron.</p><img src="/2023/02/04/Java-Annotation-build-annotations-by-yourself/API_JavaDoc_Anno_Method.png" class="" title="Java Annotation Methods"><p>Now we have known that an annotation is simply an interface. Thus, itmakes sense to induce that what can be defined in interfaces should beable to be defined in the annotation. And now we are going to talk aboutsome characteristic about annotations.</p><h1 id="annotations-content">Annotation’s content</h1><p>So what do we talk about in the interface? Methods. (Attributes arekinda useless in this case) Let’s take a look about the methods inannotations.</p><p>We can code some abstract method in annotations as:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RayAnno &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>We can add an <code>abstract</code> of course:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> RayAnno &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> String <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>We call those methods in annotation “attributes” of annotation. Thereare some special features about these attributes, which we will talkabout soon.</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
      <category>Java</category>
      
      <category>Java Language</category>
      
      <category>Annotation Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java Annotation</tag>
      
      <tag>Programming</tag>
      
      <tag>Tech</tag>
      
      <tag>Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Annotation-built in annotation</title>
    <link href="/2023/02/02/Java-Annotation-built-in-annotation/"/>
    <url>/2023/02/02/Java-Annotation-built-in-annotation/</url>
    
    <content type="html"><![CDATA[<p>Here is the video version:</p><div style="position: relative; width: 100%; padding-bottom: 70%;"><p><iframe src="https://www.youtube.com/embed/DPzwfhlGf-c" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p></div><h1 id="what-are-some-built-in-annotations">What are some built inannotations</h1><p>We can check some definitions from the <ahref="https://en.wikipedia.org/wiki/Java_annotation">Wikipedia pageabout Java annotation</a></p><p>We found that they introduced three built in annotation here</p><img src="/2023/02/02/Java-Annotation-built-in-annotation/wiki_javaAnno.png" class="" title="Wikipidia page about java annotation"><h2id="override-check-if-the-method-is-correctly-overriding-another-one"><code>@Override</code>:check if the method is correctly overriding another one</h2><h2id="deprecated-to-note-that-the-method-is-out-dated-might-have-a-problem-or-too-slow"><code>@Deprecated</code>:to note that the method is out-dated (might have a problem or tooslow)</h2><h2id="suppresswarnings-to-wipe-out-warnings"><code>@SuppressWarnings</code>:to wipe out warnings</h2><p>now let's jump into some code and see how these three annotations areworking in real-world cases</p><h1 id="override"><code>@Override</code></h1><p>As we introduce before in the <ahref="https://slray.com/2023/02/02/What-is-Java-Annotation-intro/">Annotation-intro</a>,<code>@Override</code> annotation is for checking whether a method iscorrectly overriding this class’ super class, or interface.</p><p>Let's go through some example codes:</p><p>We have an <code>Animal</code> class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :An animal class for annotation demo</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;attacking-&gt;&quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>And a <code>cat</code>class that extend <code>Animal</code>class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br><span class="hljs-comment">//If we change the return type, input parameter type or amount</span><br><span class="hljs-comment">//then the program will post an erro</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Miao attack! -&gt;&quot;</span> + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="deprecated"><code>@Deprecated</code></h1><p><code>@Deprecated</code> annotation will mark current method asout-dated.</p><p>Let’s look at an example.</p><p>We have a <code>SumCalculator</code>class in which we are planning todo sum calculation. At first we have the method as such:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SumCalculator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<span class="hljs-keyword">return</span> a+b;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>but later on we found that the <code>sum()</code>method can only taketwo parameters, but we wanna change it so that it could take whatevernumbers people wanna input. Moreover, we also wanna inform people thatthe <code>sum()</code>method is out-dated. Instead, people should use<code>sumNumbers()</code>. We can do such thing:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SumCalculator</span> &#123;<br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<span class="hljs-keyword">return</span> a+b;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumNumbers</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            result += num;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Notice here we can add a <code>@Deprecated</code> on the top of<code>sum()</code> method. Thus when we call it, we will have followingeffect to remind users that they are calling deprecated methods.</p><img src="/2023/02/02/Java-Annotation-built-in-annotation/sum_depre.png" class="" title="Deprecated sum reminding"><h2 id="some-source-code-with-deprecated">Some source code with<code>@Deprecated</code>:</h2><p>Where do we see a lot of deprecated method? When we are codinginvolving <code>Date</code> class.</p><img src="/2023/02/02/Java-Annotation-built-in-annotation/builtin_depre.png" class="" title="Built in built in deprecated methods"><h1 id="suppresswarnings"><code>@SuppressWarnings</code>:</h1><p>This annotation is used to suppress compiler’s warning.</p><p>When we write code like this, we can see on the top right cornerwhere is a yellow triangle with an exclamation mark with number 4. Wecan also see that on the right side, there are 4 bars.</p><img src="/2023/02/02/Java-Annotation-built-in-annotation/warnings.png" class="" title="All the warnings"><p>Each bar represent some warning. Such as “Method ‘test()’ is neverused”.</p><img src="/2023/02/02/Java-Annotation-built-in-annotation/warning_big.png" class="" title="detailed warnings"><p>But we can suppress the warning by doing this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WarningDemo</span> &#123;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Notice we added <code>@SuppressWarnings("all")</code> on the top ofthe method whose warning you want to suppress.</p><p>After doing this, you will find that the yellow bar disappeared.</p><ul><li>Parameters in annotation:</li></ul><p>You might have noticed that there was an “all” parameter inside ofthe annotation. This means we want to suppress all the warning. We willlook as this later.</p><p>Normally, we would add <code>@SuppressWarnings("all")</code> on thetop of the class, so that we can suppress all the warnings.</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
      <category>Java</category>
      
      <category>Java Language</category>
      
      <category>Annotation Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java Annotation</tag>
      
      <tag>Programming</tag>
      
      <tag>Tech</tag>
      
      <tag>Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>What is Java Annotation?-intro</title>
    <link href="/2023/02/02/What-is-Java-Annotation-intro/"/>
    <url>/2023/02/02/What-is-Java-Annotation-intro/</url>
    
    <content type="html"><![CDATA[<h1 id="annotation-intro">Annotation-intro</h1><p>This is the video version:</p><div style="position: relative; width: 100%; padding-bottom: 70%;"><p><iframe src="https://www.youtube.com/embed/XEE_BeI-U_I" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p></div><h1 id="introduction">Introduction</h1><h2 id="where-have-we-seen-annotation">Where have we seenannotation</h2><ul><li>When learning inheritance: <code>@Override</code><ul><li>extend a super class</li><li>implements an interface</li></ul></li><li>When we use Unit test: <code>@Test</code><ul><li>To run something “without” a main method</li></ul></li><li><dl><dt>When learning Java Spring (totally fine if you haven’t touchedanything about spring)</dt><dd><p><code>@Configuration</code>, <code>@Component</code>,<code>@Repository</code>, <code>@Autowire</code>...</p></dd></dl><ul><li>We can use annotation to create beans</li><li>We can use annotation to set restriction for parameters</li></ul></li></ul><h1 id="what-is-annotation">What is annotation</h1><h2 id="in-short-it-is-a-kind-of-not-part-of-the-program">In short, itis a kind of “not part of the program”</h2><p>Where have we see something that feels like not part of the program?Yes, comments! Annotation is just like comments. But instead of forhuman, annotation is more like a comment for program, specifically forjava compiler.</p><h2 id="why-do-we-wanna-learn-annotation">Why do we wanna learnannotation?</h2><p>Admittedly, you can write Java programs and use annotation withoutlearning the underlaying principle. However, if you are not satisfiedwith just using the frameworks developed by others, if you wanna doframeworks by yourself, or if you want to have a deeper understanding ofwhat is inside of Java language design, then it is indispensable tolearn annotation and finish this series.</p><p>Annotation is counted as an advanced knowledge of Java programming.You are stepping out of beginners and intermediate, if you are watchingthis video!</p><h2 id="say-in-the-end">Say in the end</h2><ul><li>We will jump into the source code of annotation and have a touch onwhat exactly annotation is. (spoil alert! it is simply aninterface)</li><li>I will introduce several frequently used built-in annotation</li></ul><h1 id="definitions">Definitions:</h1><h2 id="to-describe-programs-but-for-programs">--To describe programs,but for programs</h2><h2 id="format-xxx">--Format: <code>@XXX</code></h2><h1 id="functions">Functions:</h1><h2 id="to-format-java-documentation-api-doc">1. To format javadocumentation (API doc)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> : Ray Li</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@created</span> : 13/31/3033, 25:61</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> :</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name of the person you wanna greet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sentence of the greeting</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> full greeting sentence</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">greet</span><span class="hljs-params">(String name, String sentence)</span> &#123;<br>        <span class="hljs-keyword">return</span> sentence + <span class="hljs-string">&quot;, &quot;</span> + name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>A java document is something you see when you search up thing like"how to slipt String in Java". Here are some examples.<ul><li><ahref="https://docs.oracle.com/javase/7/docs/api/java/lang/String.html">ClassString</a></li><li><ahref="https://docs.oracle.com/javase/7/docs/api/java/util/Collections.html">ClassCollections</a></li></ul></li></ul><p>Then, type <code>javadoc</code> in the command line, and you willfound the files pop out.</p><p>Click the <code>index.html</code>, you will find the java doc.</p><h2 id="analyze-the-code">2. Analyze the code</h2><h2 id="compiling-check">3. Compiling check</h2>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
      <category>Java</category>
      
      <category>Java Language</category>
      
      <category>Annotation Tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java Annotation</tag>
      
      <tag>Programming</tag>
      
      <tag>Tech</tag>
      
      <tag>Tutorial</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/11/hello-world/"/>
    <url>/2023/01/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://slray.com">Ray's website</a>! This is myvery first post!</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>How does this website come into place?</title>
    <link href="/2023/01/10/How-does-this-website-come-into-place/"/>
    <url>/2023/01/10/How-does-this-website-come-into-place/</url>
    
    <content type="html"><![CDATA[<p>I wrote this blog for those of you who might be interested inbuilding a website, not necessaryly a personal blog. You could simplyshow your projects, resume, or just have a world of your own. I buildthis blog out of nothing but a thought, thus do not let coding or CSskills become an obstacle on your way.</p><p>There will be a table of content on the right side, feel free to jumpto the prefered part.</p><h1 id="why-would-i-care-about-how-you-build-this-website">Why would Icare about how you build this website?</h1><p>A short answer would be very similar to the introduction. Yet otherthan that, you can truly learn a lot from exploring the world of web. Itried AWS, Google Could, Microsoft cloud, and even a local server--aRasperry Pi; I bought a domain name, trying to connect it to my cloudserver, which spent tens of my life and hair. During the process, I gota touch on what dynamic/static web page is, what DNS is, what IP addressis, to name a few. It is a journey worth to try.</p><h1 id="so-how-did-you-build-this-website">So how did you build thiswebsite?</h1><p>A short answer: <a href="https://pages.github.com/">GitHub Pages</a>+ <a href="https://hexo.io/">Hexo</a> + a domain name(<ahref="https://slray.com/">slray.com</a>).</p><h2 id="why-github-pages">Why GitHub Pages</h2><p>I am an international student from China, and I would love to show mywebsite to both my friends from China and the rest of the world.Fortunately, <a href="https://github.com/">GitHub</a> is no longerblocked in China. Thus, I used <ahref="https://pages.github.com/">GitHub Pages</a> as my web server.</p><h3 id="a-problem-with-github-pages">A problem with GitHub Pages</h3><p>You can only deploy static web pages. This does not mean that youcannot have animations or special effects for the website. A static webpages is more like a solely online web page, meaning that you can not(orit is very hard to) collect data from the websites as well as show data.In other words, you can have a blog showing your words, your pictures,or your videos. Yet you cannot deploy a web application.</p><p>However, that would not be a huge problem, and a static page isalready enough for now.</p><h2 id="what-is-hexo">What is Hexo</h2><p>This is a website providing well-designed web-pages for those who arebad at designing. I used this website for a better appearance of thedesign of the website.</p><p>Remember when doing a slide for presentation, groupmates would goonline for templates. <a href="https://hexo.io/">Hexo</a> is a similarwebsite for template, but for webpages instead of a slide. (Come on, awebsite is much coooler than a slide!)</p><hr /><p>I have spent so much time on this website. This would be my firstofficial post with content. It would not be an easy job to build awebsite, espcially when you are fighting alone and searching up thequestions that only have two pages of result. I know there would stillbe a lot of confusions: what is a web server? what is git? what is adomain? what is web? what is those <code>http</code> stuff. Is itexpensive to build a website? I will probably post more details abouthow I build this website. I basically tried out most of the ways andtouched on most of erros. I would love to try my best to save some timeand provide some consolation for those who are encoutering the sameproblems and feeling that no one could help.</p><p>See you next time!</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
      <category>Web</category>
      
      <category>Personal Website</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>server</tag>
      
      <tag>GitHub</tag>
      
      <tag>AWS</tag>
      
      <tag>Google Could</tag>
      
      <tag>Personal Blog</tag>
      
      <tag>Building website</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
